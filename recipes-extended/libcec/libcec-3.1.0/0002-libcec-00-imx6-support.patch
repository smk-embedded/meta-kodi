From af4f8b9255dc4de398b6c32f67d68c941663d128 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Stefan=20M=C3=BCller-Klieser?=
 <stefan.mueller-klieser@web.de>
Date: Wed, 19 Oct 2016 14:09:13 +0200
Subject: [PATCH 2/4] libcec-00-imx6-support
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Stefan MÃ¼ller-Klieser <stefan.mueller-klieser@web.de>
---
 include/cectypes.h                                 |   14 +-
 include/cectypes.h.orig                            | 1602 ++++++++++++++++++++
 src/libcec/CECTypeUtils.h                          |    2 +
 src/libcec/CECTypeUtils.h.orig                     |  796 ++++++++++
 src/libcec/adapter/AdapterFactory.cpp              |   29 +-
 src/libcec/adapter/IMX/AdapterMessageQueue.h       |  134 ++
 .../adapter/IMX/IMXCECAdapterCommunication.cpp     |  328 ++++
 .../adapter/IMX/IMXCECAdapterCommunication.h       |  119 ++
 src/libcec/adapter/IMX/IMXCECAdapterDetection.cpp  |   42 +
 src/libcec/adapter/IMX/IMXCECAdapterDetection.h    |   36 +
 src/libcec/cmake/CheckPlatformSupport.cmake        |   10 +
 src/libcec/cmake/CheckPlatformSupport.cmake.orig   |  188 +++
 src/libcec/cmake/DisplayPlatformSupport.cmake      |    6 +
 src/libcec/cmake/DisplayPlatformSupport.cmake.orig |   54 +
 src/libcec/env.h.in                                |    3 +
 src/libcec/env.h.in.orig                           |   85 ++
 16 files changed, 3445 insertions(+), 3 deletions(-)
 create mode 100644 include/cectypes.h.orig
 create mode 100644 src/libcec/CECTypeUtils.h.orig
 create mode 100644 src/libcec/adapter/IMX/AdapterMessageQueue.h
 create mode 100644 src/libcec/adapter/IMX/IMXCECAdapterCommunication.cpp
 create mode 100644 src/libcec/adapter/IMX/IMXCECAdapterCommunication.h
 create mode 100644 src/libcec/adapter/IMX/IMXCECAdapterDetection.cpp
 create mode 100644 src/libcec/adapter/IMX/IMXCECAdapterDetection.h
 create mode 100644 src/libcec/cmake/CheckPlatformSupport.cmake.orig
 create mode 100644 src/libcec/cmake/DisplayPlatformSupport.cmake.orig
 create mode 100644 src/libcec/env.h.in.orig

diff --git a/include/cectypes.h b/include/cectypes.h
index b63b402..dd7327b 100644
--- a/include/cectypes.h
+++ b/include/cectypes.h
@@ -309,6 +309,17 @@ namespace CEC {
 #define CEC_EXYNOS_VIRTUAL_COM		"Exynos"
 
 /*!
+ * the path to use for the i.MX CEC wire
+ */
+#define CEC_IMX_PATH		"/dev/mxc_hdmi_cec"
+
+/*!
+ * the name of the virtual COM port to use for the i.MX CEC wire
+ */
+#define CEC_IMX_VIRTUAL_COM		"i.MX"
+
+
+/*!
  * Mimimum client version
  */
 #define CEC_MIN_LIB_VERSION          3
@@ -877,7 +888,8 @@ typedef enum cec_adapter_type
   ADAPTERTYPE_P8_DAUGHTERBOARD = 0x2,
   ADAPTERTYPE_RPI              = 0x100,
   ADAPTERTYPE_TDA995x          = 0x200,
-  ADAPTERTYPE_EXYNOS           = 0x300
+  ADAPTERTYPE_EXYNOS           = 0x300,
+  ADAPTERTYPE_IMX              = 0x400
 } cec_adapter_type;
 
 /** force exporting through swig */
diff --git a/include/cectypes.h.orig b/include/cectypes.h.orig
new file mode 100644
index 0000000..b63b402
--- /dev/null
+++ b/include/cectypes.h.orig
@@ -0,0 +1,1602 @@
+#pragma once
+/*
+ * This file is part of the libCEC(R) library.
+ *
+ * libCEC(R) is Copyright (C) 2011-2015 Pulse-Eight Limited.  All rights reserved.
+ * libCEC(R) is an original work, containing original code.
+ *
+ * libCEC(R) is a trademark of Pulse-Eight Limited.
+ *
+ * This program is dual-licensed; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ *
+ * Alternatively, you can license this library under a commercial license,
+ * please contact Pulse-Eight Licensing for more information.
+ *
+ * For more information contact:
+ * Pulse-Eight Licensing       <license@pulse-eight.com>
+ *     http://www.pulse-eight.com/
+ *     http://www.pulse-eight.net/
+ */
+
+#ifndef CECTYPES_H_
+#define CECTYPES_H_
+
+#include "version.h"
+#include <stdint.h>
+#include <string.h>
+
+#if defined(_WIN32) || defined(_WIN64)
+#define CEC_CDECL    __cdecl
+#else
+#define CEC_CDECL
+#endif
+
+#if !defined(DECLSPEC)
+#if defined(_WIN32) || defined(_WIN64)
+#include <windows.h>
+#if defined DLL_EXPORT
+#define DECLSPEC __declspec(dllexport)
+#else
+#define DECLSPEC __declspec(dllimport)
+#endif
+#else
+#define DECLSPEC
+#endif
+#endif
+
+#ifdef __cplusplus
+#include <string>
+extern "C" {
+namespace CEC {
+#endif
+
+/*!
+ * default physical address 1.0.0.0, HDMI port 1
+ */
+#define CEC_DEFAULT_PHYSICAL_ADDRESS 0x1000
+/*!
+ * default HDMI port to which the adapter is connected, port 1
+ */
+#define CEC_DEFAULT_HDMI_PORT        1
+/*!
+ * default logical address of the device to which the adapter is connected, TV
+ */
+#define CEC_DEFAULT_BASE_DEVICE      0
+
+/*!
+ * timeout in milliseconds to send a key release event after receiving a key press
+ */
+#define CEC_BUTTON_TIMEOUT           500
+
+/*!
+ * don't send the same key twice within this timeout in units of 50 milliseconds
+ * 4 = 200ms
+ */
+#define CEC_DOUBLE_TAP_TIMEOUT_50_MS    4
+#define CEC_DOUBLE_TAP_TIMEOUT_MS_OLD   200
+
+/*!
+ * don't query the power state for the same device within this timeout in milliseconds
+ */
+#define CEC_POWER_STATE_REFRESH_TIME 30000
+
+/*!
+ * unknown firmware version value
+ */
+#define CEC_FW_VERSION_UNKNOWN       0xFFFF
+
+/*!
+ * unknown build date value
+ */
+#define CEC_FW_BUILD_UNKNOWN         0
+
+/*!
+ * maximum number of retries when opening a connection
+ */
+#define CEC_CONNECT_TRIES            3
+
+/*!
+ * physical address of the TV
+ */
+#define CEC_PHYSICAL_ADDRESS_TV      0
+
+/*!
+ * minimum physical address for the adapter
+ */
+#define CEC_MIN_PHYSICAL_ADDRESS     0x1000
+
+/*!
+ * maximum physical address for the adapter
+ */
+#define CEC_MAX_PHYSICAL_ADDRESS     0xFFFE
+
+/*!
+ * invalid physical address value
+ */
+#define CEC_INVALID_PHYSICAL_ADDRESS 0xFFFF
+
+/*!
+ * minimum vendor ID value
+ */
+#define CEC_MIN_VENDORID             1
+
+/*!
+ * maximum vendor ID value
+ */
+#define CEC_MAX_VENDORID             0xFFFFFE
+
+/*!
+ * invalid vendor ID value
+ */
+#define CEC_INVALID_VENDORID         0xFFFFFF
+
+/*!
+ * minimum HDMI port number value
+ */
+#define CEC_MIN_HDMI_PORTNUMBER      1
+
+/*!
+ * maximum HDMI port number value
+ */
+#define CEC_MAX_HDMI_PORTNUMBER      15
+
+/*!
+ * invalid HDMI port number value
+ */
+#define CEC_HDMI_PORTNUMBER_NONE     0
+
+/*!
+ * default value for settings "use tv menu language"
+ */
+#define CEC_DEFAULT_SETTING_USE_TV_MENU_LANGUAGE      1
+
+/*!
+ * default value for settings "activate source"
+ */
+#define CEC_DEFAULT_SETTING_ACTIVATE_SOURCE           1
+
+/*!
+ * default value for settings "power off on shutdown"
+ */
+#define CEC_DEFAULT_SETTING_POWER_OFF_SHUTDOWN        1
+
+/*!
+ * default value for settings "power off when activating the screensaver"
+ */
+#define CEC_DEFAULT_SETTING_POWER_OFF_SCREENSAVER     1
+
+/*!
+ * default value for settings "wake up when deactivating the screensaver"
+ */
+#define CEC_DEFAULT_SETTING_POWER_ON_SCREENSAVER      1
+
+/*!
+ * default value for settings "power off on standby"
+ */
+#define CEC_DEFAULT_SETTING_POWER_OFF_ON_STANDBY      1
+
+/*!
+ * default value for settings "shutdown on standby"
+ */
+#define CEC_DEFAULT_SETTING_SHUTDOWN_ON_STANDBY       0
+
+/*!
+ * default value for settings "send inactive source when stopping"
+ */
+#define CEC_DEFAULT_SETTING_SEND_INACTIVE_SOURCE      1
+
+/*!
+ * default value for settings "power off devices when going to standby"
+ */
+#define CEC_DEFAULT_SETTING_POWER_OFF_DEVICES_STANDBY 1
+
+/*!
+ * default value for settings "device menu language"
+ */
+#define CEC_DEFAULT_DEVICE_LANGUAGE                   "eng"
+
+/*!
+ * default value for settings "autodetect physical address"
+ */
+#define CEC_DEFAULT_SETTING_AUTODETECT_ADDRESS        0
+
+/*!
+ * default value for settings "get settings from ROM"
+ */
+#define CEC_DEFAULT_SETTING_GET_SETTINGS_FROM_ROM     0
+
+/*!
+ * default value for settings "libCEC CEC version"
+ */
+#define CEC_DEFAULT_SETTING_CEC_VERSION               0x05
+
+/*!
+ * wait this amount of milliseconds before retrying to send a failed message
+ */
+#define CEC_DEFAULT_TRANSMIT_RETRY_WAIT 500
+
+/*!
+ * transmission fails when not acked within this amount of milliseconds after sending the initial packet
+ */
+#define CEC_DEFAULT_TRANSMIT_TIMEOUT    1000
+
+/*!
+ * wait this amount of milliseconds for an ack
+ */
+#define CEC_DEFAULT_TRANSMIT_WAIT       1000
+
+/*!
+ * default number of retries
+ */
+#define CEC_DEFAULT_TRANSMIT_RETRIES    1
+
+/*!
+ * default connection timeout in milliseconds
+ */
+#define CEC_DEFAULT_CONNECT_TIMEOUT     10000
+
+/*!
+ * wait this amount of milliseconds before retrying when failing to connect
+ */
+#define CEC_DEFAULT_CONNECT_RETRY_WAIT  1000
+
+/*!
+ * default serial baudrate
+ */
+#define CEC_SERIAL_DEFAULT_BAUDRATE     38400
+
+/*!
+ * maximum time to wait when clearing input
+ */
+#define CEC_CLEAR_INPUT_DEFAULT_WAIT    1000
+
+/*!
+ * wait this amount of milliseconds before retrying when libCEC failed to make itself the active source
+ */
+#define CEC_ACTIVE_SOURCE_SWITCH_RETRY_TIME_MS 1000
+
+/*!
+ * don't forward any power off command to the client application for this amount of milliseconds after sending a power off command
+ */
+#define CEC_FORWARD_STANDBY_MIN_INTERVAL 10000
+
+/*!
+ * default timeout in milliseconds for combo keys
+ */
+#define CEC_DEFAULT_COMBO_TIMEOUT_MS 1000
+
+/*!
+ * the virtual device path to use for the Raspberry Pi's CEC wire
+ */
+#define CEC_RPI_VIRTUAL_PATH           "Raspberry Pi"
+
+/*!
+ * the name of the virtual COM port to use for the Raspberry Pi's CEC wire
+ */
+#define CEC_RPI_VIRTUAL_COM            "RPI"
+
+/*!
+ * the path to use for the TDA995x's CEC wire
+ */
+#define CEC_TDA995x_PATH		"/dev/hdmicec"
+
+/*!
+ * the name of the virtual COM port to use for the TDA995x's CEC wire
+ */
+#define CEC_TDA995x_VIRTUAL_COM		"CuBox"
+
+/*!
+ * the path to use for the Exynos HDMI CEC device
+ */
+#define CEC_EXYNOS_PATH		"/dev/CEC"
+
+/*!
+ * the name of the virtual COM port to use for the EXYNOS' CEC wire
+ */
+#define CEC_EXYNOS_VIRTUAL_COM		"Exynos"
+
+/*!
+ * Mimimum client version
+ */
+#define CEC_MIN_LIB_VERSION          3
+
+#define MSGSTART                     0xFF
+#define MSGEND                       0xFE
+#define MSGESC                       0xFD
+#define ESCOFFSET                    3
+
+#define DOUBLE_TAP_TIMEOUT_UNIT_SIZE (50)
+
+// defines to make compile time checks for certain features easy
+#define CEC_FEATURE_CONFIGURABLE_COMBO_KEY 1
+
+typedef enum cec_abort_reason
+{
+  CEC_ABORT_REASON_UNRECOGNIZED_OPCODE            = 0,//!< CEC_ABORT_REASON_UNRECOGNIZED_OPCODE
+  CEC_ABORT_REASON_NOT_IN_CORRECT_MODE_TO_RESPOND = 1,//!< CEC_ABORT_REASON_NOT_IN_CORRECT_MODE_TO_RESPOND
+  CEC_ABORT_REASON_CANNOT_PROVIDE_SOURCE          = 2,//!< CEC_ABORT_REASON_CANNOT_PROVIDE_SOURCE
+  CEC_ABORT_REASON_INVALID_OPERAND                = 3,//!< CEC_ABORT_REASON_INVALID_OPERAND
+  CEC_ABORT_REASON_REFUSED                        = 4 //!< CEC_ABORT_REASON_REFUSED
+} cec_abort_reason;
+
+typedef enum cec_analogue_broadcast_type
+{
+  CEC_ANALOGUE_BROADCAST_TYPE_CABLE      = 0x00,
+  CEC_ANALOGUE_BROADCAST_TYPE_SATELLITE  = 0x01,
+  CEC_ANALOGUE_BROADCAST_TYPE_TERRESTIAL = 0x02
+} cec_analogue_broadcast_type;
+
+typedef enum cec_audio_rate
+{
+  CEC_AUDIO_RATE_RATE_CONTROL_OFF    = 0,
+  CEC_AUDIO_RATE_STANDARD_RATE_100   = 1,
+  CEC_AUDIO_RATE_FAST_RATE_MAX_101   = 2,
+  CEC_AUDIO_RATE_SLOW_RATE_MIN_99    = 3,
+  CEC_AUDIO_RATE_STANDARD_RATE_100_0 = 4,
+  CEC_AUDIO_RATE_FAST_RATE_MAX_100_1 = 5,
+  CEC_AUDIO_RATE_SLOW_RATE_MIN_99_9  = 6
+} cec_audio_rate;
+
+typedef enum cec_audio_status
+{
+  CEC_AUDIO_MUTE_STATUS_MASK      = 0x80,
+  CEC_AUDIO_VOLUME_STATUS_MASK    = 0x7F,
+  CEC_AUDIO_VOLUME_MIN            = 0x00,
+  CEC_AUDIO_VOLUME_MAX            = 0x64,
+  CEC_AUDIO_VOLUME_STATUS_UNKNOWN = 0x7F
+} cec_audio_status;
+
+typedef enum cec_boolean
+{
+  CEC_FALSE = 0,
+  CEC_TRUE  = 1
+} cec_boolean;
+
+typedef enum cec_version
+{
+  CEC_VERSION_UNKNOWN = 0x00,
+  CEC_VERSION_1_2     = 0x01,
+  CEC_VERSION_1_2A    = 0x02,
+  CEC_VERSION_1_3     = 0x03,
+  CEC_VERSION_1_3A    = 0x04,
+  CEC_VERSION_1_4     = 0x05
+} cec_version;
+
+typedef enum cec_channel_identifier
+{
+  CEC_CHANNEL_NUMBER_FORMAT_MASK = 0xFC000000,
+  CEC_1_PART_CHANNEL_NUMBER      = 0x04000000,
+  CEC_2_PART_CHANNEL_NUMBER      = 0x08000000,
+  CEC_MAJOR_CHANNEL_NUMBER_MASK  = 0x3FF0000,
+  CEC_MINOR_CHANNEL_NUMBER_MASK  = 0xFFFF
+} cec_channel_identifier;
+
+typedef enum cec_deck_control_mode
+{
+  CEC_DECK_CONTROL_MODE_SKIP_FORWARD_WIND   = 1,
+  CEC_DECK_CONTROL_MODE_SKIP_REVERSE_REWIND = 2,
+  CEC_DECK_CONTROL_MODE_STOP                = 3,
+  CEC_DECK_CONTROL_MODE_EJECT               = 4
+} cec_deck_control_mode;
+
+typedef enum cec_deck_info
+{
+  CEC_DECK_INFO_PLAY                 = 0x11,
+  CEC_DECK_INFO_RECORD               = 0x12,
+  CEC_DECK_INFO_PLAY_REVERSE         = 0x13,
+  CEC_DECK_INFO_STILL                = 0x14,
+  CEC_DECK_INFO_SLOW                 = 0x15,
+  CEC_DECK_INFO_SLOW_REVERSE         = 0x16,
+  CEC_DECK_INFO_FAST_FORWARD         = 0x17,
+  CEC_DECK_INFO_FAST_REVERSE         = 0x18,
+  CEC_DECK_INFO_NO_MEDIA             = 0x19,
+  CEC_DECK_INFO_STOP                 = 0x1A,
+  CEC_DECK_INFO_SKIP_FORWARD_WIND    = 0x1B,
+  CEC_DECK_INFO_SKIP_REVERSE_REWIND  = 0x1C,
+  CEC_DECK_INFO_INDEX_SEARCH_FORWARD = 0x1D,
+  CEC_DECK_INFO_INDEX_SEARCH_REVERSE = 0x1E,
+  CEC_DECK_INFO_OTHER_STATUS         = 0x1F,
+  CEC_DECK_INFO_OTHER_STATUS_LG      = 0x20
+} cec_deck_info;
+
+typedef enum cec_device_type
+{
+  CEC_DEVICE_TYPE_TV               = 0,
+  CEC_DEVICE_TYPE_RECORDING_DEVICE = 1,
+  CEC_DEVICE_TYPE_RESERVED         = 2,
+  CEC_DEVICE_TYPE_TUNER            = 3,
+  CEC_DEVICE_TYPE_PLAYBACK_DEVICE  = 4,
+  CEC_DEVICE_TYPE_AUDIO_SYSTEM     = 5
+} cec_device_type;
+
+typedef enum cec_display_control
+{
+  CEC_DISPLAY_CONTROL_DISPLAY_FOR_DEFAULT_TIME = 0x00,
+  CEC_DISPLAY_CONTROL_DISPLAY_UNTIL_CLEARED    = 0x40,
+  CEC_DISPLAY_CONTROL_CLEAR_PREVIOUS_MESSAGE   = 0x80,
+  CEC_DISPLAY_CONTROL_RESERVED_FOR_FUTURE_USE  = 0xC0
+} cec_display_control;
+
+typedef enum cec_external_source_specifier
+{
+  CEC_EXTERNAL_SOURCE_SPECIFIER_EXTERNAL_PLUG             = 4,
+  CEC_EXTERNAL_SOURCE_SPECIFIER_EXTERNAL_PHYSICAL_ADDRESS = 5
+} cec_external_source_specifier;
+
+typedef enum cec_menu_request_type
+{
+  CEC_MENU_REQUEST_TYPE_ACTIVATE   = 0,
+  CEC_MENU_REQUEST_TYPE_DEACTIVATE = 1,
+  CEC_MENU_REQUEST_TYPE_QUERY      = 2
+} cec_menu_request_type;
+
+typedef enum cec_menu_state
+{
+  CEC_MENU_STATE_ACTIVATED   = 0,
+  CEC_MENU_STATE_DEACTIVATED = 1
+} cec_menu_state;
+
+typedef enum cec_play_mode
+{
+  CEC_PLAY_MODE_PLAY_FORWARD              = 0x24,
+  CEC_PLAY_MODE_PLAY_REVERSE              = 0x20,
+  CEC_PLAY_MODE_PLAY_STILL                = 0x25,
+  CEC_PLAY_MODE_FAST_FORWARD_MIN_SPEED    = 0x05,
+  CEC_PLAY_MODE_FAST_FORWARD_MEDIUM_SPEED = 0x06,
+  CEC_PLAY_MODE_FAST_FORWARD_MAX_SPEED    = 0x07,
+  CEC_PLAY_MODE_FAST_REVERSE_MIN_SPEED    = 0x09,
+  CEC_PLAY_MODE_FAST_REVERSE_MEDIUM_SPEED = 0x0A,
+  CEC_PLAY_MODE_FAST_REVERSE_MAX_SPEED    = 0x0B,
+  CEC_PLAY_MODE_SLOW_FORWARD_MIN_SPEED    = 0x15,
+  CEC_PLAY_MODE_SLOW_FORWARD_MEDIUM_SPEED = 0x16,
+  CEC_PLAY_MODE_SLOW_FORWARD_MAX_SPEED    = 0x17,
+  CEC_PLAY_MODE_SLOW_REVERSE_MIN_SPEED    = 0x19,
+  CEC_PLAY_MODE_SLOW_REVERSE_MEDIUM_SPEED = 0x1A,
+  CEC_PLAY_MODE_SLOW_REVERSE_MAX_SPEED    = 0x1B
+} cec_play_mode;
+
+typedef enum cec_power_status
+{
+  CEC_POWER_STATUS_ON                          = 0x00,
+  CEC_POWER_STATUS_STANDBY                     = 0x01,
+  CEC_POWER_STATUS_IN_TRANSITION_STANDBY_TO_ON = 0x02,
+  CEC_POWER_STATUS_IN_TRANSITION_ON_TO_STANDBY = 0x03,
+  CEC_POWER_STATUS_UNKNOWN                     = 0x99
+} cec_power_status;
+
+typedef enum cec_record_source_type
+{
+  CEC_RECORD_SOURCE_TYPE_OWN_SOURCE                = 1,
+  CEC_RECORD_SOURCE_TYPE_DIGITAL_SERVICE           = 2,
+  CEC_RECORD_SOURCE_TYPE_ANALOGUE_SERVICE          = 3,
+  CEC_RECORD_SOURCE_TYPE_EXTERNAL_PLUS             = 4,
+  CEC_RECORD_SOURCE_TYPE_EXTERNAL_PHYSICAL_ADDRESS = 5
+} cec_record_source_type;
+
+typedef enum cec_record_status_info
+{
+  CEC_RECORD_STATUS_INFO_RECORDING_CURRENTLY_SELECTED_SOURCE            = 0x01,
+  CEC_RECORD_STATUS_INFO_RECORDING_DIGITAL_SERVICE                      = 0x02,
+  CEC_RECORD_STATUS_INFO_RECORDING_ANALOGUE_SERVICE                     = 0x03,
+  CEC_RECORD_STATUS_INFO_RECORDING_EXTERNAL_INPUT                       = 0x04,
+  CEC_RECORD_STATUS_INFO_NO_RECORDING_UNABLE_TO_RECORD_DIGITAL_SERVICE  = 0x05,
+  CEC_RECORD_STATUS_INFO_NO_RECORDING_UNABLE_TO_RECORD_ANALOGUE_SERVICE = 0x06,
+  CEC_RECORD_STATUS_INFO_NO_RECORDING_UNABLE_TO_SELECT_REQUIRED_SERVICE = 0x07,
+  CEC_RECORD_STATUS_INFO_NO_RECORDING_INVALID_EXTERNAL_PLUG_NUMBER      = 0x09,
+  CEC_RECORD_STATUS_INFO_NO_RECORDING_INVALID_EXTERNAL_ADDRESS          = 0x0A,
+  CEC_RECORD_STATUS_INFO_NO_RECORDING_CA_SYSTEM_NOT_SUPPORTED           = 0x0B,
+  CEC_RECORD_STATUS_INFO_NO_RECORDING_NO_OR_INSUFFICIENT_ENTITLEMENTS   = 0x0C,
+  CEC_RECORD_STATUS_INFO_NO_RECORDING_NOT_ALLOWED_TO_COPY_SOURCE        = 0x0D,
+  CEC_RECORD_STATUS_INFO_NO_RECORDING_NO_FURTHER_COPIES_ALLOWED         = 0x0E,
+  CEC_RECORD_STATUS_INFO_NO_RECORDING_NO_MEDIA                          = 0x10,
+  CEC_RECORD_STATUS_INFO_NO_RECORDING_PLAYING                           = 0x11,
+  CEC_RECORD_STATUS_INFO_NO_RECORDING_ALREADY_RECORDING                 = 0x12,
+  CEC_RECORD_STATUS_INFO_NO_RECORDING_MEDIA_PROTECTED                   = 0x13,
+  CEC_RECORD_STATUS_INFO_NO_RECORDING_NO_SOURCE_SIGNAL                  = 0x14,
+  CEC_RECORD_STATUS_INFO_NO_RECORDING_MEDIA_PROBLEM                     = 0x15,
+  CEC_RECORD_STATUS_INFO_NO_RECORDING_NOT_ENOUGH_SPACE_AVAILABLE        = 0x16,
+  CEC_RECORD_STATUS_INFO_NO_RECORDING_PARENTAL_LOCK_ON                  = 0x17,
+  CEC_RECORD_STATUS_INFO_RECORDING_TERMINATED_NORMALLY                  = 0x1A,
+  CEC_RECORD_STATUS_INFO_RECORDING_HAS_ALREADY_TERMINATED               = 0x1B,
+  CEC_RECORD_STATUS_INFO_NO_RECORDING_OTHER_REASON                      = 0x1F
+} cec_record_status_info;
+
+typedef enum cec_recording_sequence
+{
+  CEC_RECORDING_SEQUENCE_SUNDAY    = 0x01,
+  CEC_RECORDING_SEQUENCE_MONDAY    = 0x02,
+  CEC_RECORDING_SEQUENCE_TUESDAY   = 0x04,
+  CEC_RECORDING_SEQUENCE_WEDNESDAY = 0x08,
+  CEC_RECORDING_SEQUENCE_THURSDAY  = 0x10,
+  CEC_RECORDING_SEQUENCE_FRIDAY    = 0x20,
+  CEC_RECORDING_SEQUENCE_SATURDAY  = 0x40,
+  CEC_RECORDING_SEQUENCE_ONCE_ONLY = 0x00
+} cec_recording_sequence;
+
+typedef enum cec_status_request
+{
+  CEC_STATUS_REQUEST_ON   = 1,
+  CEC_STATUS_REQUEST_OFF  = 2,
+  CEC_STATUS_REQUEST_ONCE = 3
+} cec_status_request;
+
+typedef enum cec_system_audio_status
+{
+  CEC_SYSTEM_AUDIO_STATUS_OFF = 0,
+  CEC_SYSTEM_AUDIO_STATUS_ON  = 1
+} cec_system_audio_status;
+
+typedef enum cec_timer_cleared_status_data
+{
+  CEC_TIMER_CLEARED_STATUS_DATA_TIMER_NOT_CLEARED_RECORDING         = 0x00,
+  CEC_TIMER_CLEARED_STATUS_DATA_TIMER_NOT_CLEARED_NO_MATCHING       = 0x01,
+  CEC_TIMER_CLEARED_STATUS_DATA_TIMER_NOT_CLEARED_NO_INF0_AVAILABLE = 0x02,
+  CEC_TIMER_CLEARED_STATUS_DATA_TIMER_CLEARED                       = 0x80
+} cec_timer_cleared_status_data;
+
+typedef enum cec_timer_overlap_warning
+{
+  CEC_TIMER_OVERLAP_WARNING_NO_OVERLAP           = 0,
+  CEC_TIMER_OVERLAP_WARNING_TIMER_BLOCKS_OVERLAP = 1
+} cec_timer_overlap_warning;
+
+typedef enum cec_media_info
+{
+  CEC_MEDIA_INFO_MEDIA_PRESENT_AND_NOT_PROTECTED = 0x00,
+  CEC_MEDIA_INFO_MEDIA_PRESENT_BUT_PROTECTED     = 0x01,
+  CEC_MEDIA_INFO_MEDIA_NOT_PRESENT               = 0x02,
+  CEC_MEDIA_INFO_FUTURE_USE                      = 0x03
+} cec_media_info;
+
+typedef enum cec_programmed_indicator
+{
+  CEC_PROGRAMMED_INDICATOR_NOT_PROGRAMMED = 0,
+  CEC_PROGRAMMED_INDICATOR_PROGRAMMED     = 1
+} cec_programmed_indicator;
+
+typedef enum cec_programmed_info
+{
+  CEC_PROGRAMMED_INFO_FUTURE_USE                               = 0x0,
+  CEC_PROGRAMMED_INFO_ENOUGH_SPACE_AVAILABLE_FOR_RECORDING     = 0x08,
+  CEC_PROGRAMMED_INFO_NOT_ENOUGH_SPACE_AVAILABLE_FOR_RECORDING = 0x09,
+  CEC_PROGRAMMED_INFO_MAY_NOT_BE_ENOUGH_SPACE_AVAILABLE        = 0x0B,
+  CEC_PROGRAMMED_INFO_NO_MEDIA_INFO_AVAILABLE                  = 0x0A
+} cec_programmed_info;
+
+typedef enum cec_not_programmed_error_info
+{
+  CEC_NOT_PROGRAMMED_ERROR_INFO_FUTURE_USE                         = 0x0,
+  CEC_NOT_PROGRAMMED_ERROR_INFO_NO_FREE_TIMER_AVAILABLE            = 0x01,
+  CEC_NOT_PROGRAMMED_ERROR_INFO_DATE_OUT_OF_RANGE                  = 0x02,
+  CEC_NOT_PROGRAMMED_ERROR_INFO_RECORDING_SEQUENCE_ERROR           = 0x03,
+  CEC_NOT_PROGRAMMED_ERROR_INFO_INVALID_EXTERNAL_PLUG_NUMBER       = 0x04,
+  CEC_NOT_PROGRAMMED_ERROR_INFO_INVALID_EXTERNAL_PHYSICAL_ADDRESS  = 0x05,
+  CEC_NOT_PROGRAMMED_ERROR_INFO_CA_SYSTEM_NOT_SUPPORTED            = 0x06,
+  CEC_NOT_PROGRAMMED_ERROR_INFO_NO_OR_INSUFFICIENT_CA_ENTITLEMENTS = 0x07,
+  CEC_NOT_PROGRAMMED_ERROR_INFO_DOES_NOT_SUPPORT_RESOLUTION        = 0x08,
+  CEC_NOT_PROGRAMMED_ERROR_INFO_PARENTAL_LOCK_ON                   = 0x09,
+  CEC_NOT_PROGRAMMED_ERROR_INFO_CLOCK_FAILURE                      = 0x0A,
+  CEC_NOT_PROGRAMMED_ERROR_INFO_RESERVED_FOR_FUTURE_USE_START      = 0x0B,
+  CEC_NOT_PROGRAMMED_ERROR_INFO_RESERVED_FOR_FUTURE_USE_END        = 0x0D,
+  CEC_NOT_PROGRAMMED_ERROR_INFO_DUPLICATE_ALREADY_PROGRAMMED       = 0x0E
+} cec_not_programmed_error_info;
+
+typedef enum cec_recording_flag
+{
+  CEC_RECORDING_FLAG_NOT_BEING_USED_FOR_RECORDING = 0,
+  CEC_RECORDING_FLAG_BEING_USED_FOR_RECORDING     = 1
+} cec_recording_flag;
+
+typedef enum cec_tuner_display_info
+{
+  CEC_TUNER_DISPLAY_INFO_DISPLAYING_DIGITAL_TUNER  = 0,
+  CEC_TUNER_DISPLAY_INFO_NOT_DISPLAYING_TUNER      = 1,
+  CEC_TUNER_DISPLAY_INFO_DISPLAYING_ANALOGUE_TUNER = 2
+} cec_tuner_display_info;
+
+typedef enum cec_broadcast_system
+{
+  CEC_BROADCAST_SYSTEM_PAL_B_G      = 0,
+  CEC_BROADCAST_SYSTEM_SECAM_L1     = 1,
+  CEC_BROADCAST_SYSTEM_PAL_M        = 2,
+  CEC_BROADCAST_SYSTEM_NTSC_M       = 3,
+  CEC_BROADCAST_SYSTEM_PAL_I        = 4,
+  CEC_BROADCAST_SYSTEM_SECAM_DK     = 5,
+  CEC_BROADCAST_SYSTEM_SECAM_B_G    = 6,
+  CEC_BROADCAST_SYSTEM_SECAM_L2     = 7,
+  CEC_BROADCAST_SYSTEM_PAL_DK       = 8,
+  CEC_BROADCAST_SYSTEM_OTHER_SYSTEM = 30
+} cec_broadcast_system;
+
+typedef enum cec_user_control_code
+{
+  CEC_USER_CONTROL_CODE_SELECT                      = 0x00,
+  CEC_USER_CONTROL_CODE_UP                          = 0x01,
+  CEC_USER_CONTROL_CODE_DOWN                        = 0x02,
+  CEC_USER_CONTROL_CODE_LEFT                        = 0x03,
+  CEC_USER_CONTROL_CODE_RIGHT                       = 0x04,
+  CEC_USER_CONTROL_CODE_RIGHT_UP                    = 0x05,
+  CEC_USER_CONTROL_CODE_RIGHT_DOWN                  = 0x06,
+  CEC_USER_CONTROL_CODE_LEFT_UP                     = 0x07,
+  CEC_USER_CONTROL_CODE_LEFT_DOWN                   = 0x08,
+  CEC_USER_CONTROL_CODE_ROOT_MENU                   = 0x09,
+  CEC_USER_CONTROL_CODE_SETUP_MENU                  = 0x0A,
+  CEC_USER_CONTROL_CODE_CONTENTS_MENU               = 0x0B,
+  CEC_USER_CONTROL_CODE_FAVORITE_MENU               = 0x0C,
+  CEC_USER_CONTROL_CODE_EXIT                        = 0x0D,
+  // reserved: 0x0E, 0x0F
+  CEC_USER_CONTROL_CODE_TOP_MENU                    = 0x10,
+  CEC_USER_CONTROL_CODE_DVD_MENU                    = 0x11,
+  // reserved: 0x12 ... 0x1C
+  CEC_USER_CONTROL_CODE_NUMBER_ENTRY_MODE           = 0x1D,
+  CEC_USER_CONTROL_CODE_NUMBER11                    = 0x1E,
+  CEC_USER_CONTROL_CODE_NUMBER12                    = 0x1F,
+  CEC_USER_CONTROL_CODE_NUMBER0                     = 0x20,
+  CEC_USER_CONTROL_CODE_NUMBER1                     = 0x21,
+  CEC_USER_CONTROL_CODE_NUMBER2                     = 0x22,
+  CEC_USER_CONTROL_CODE_NUMBER3                     = 0x23,
+  CEC_USER_CONTROL_CODE_NUMBER4                     = 0x24,
+  CEC_USER_CONTROL_CODE_NUMBER5                     = 0x25,
+  CEC_USER_CONTROL_CODE_NUMBER6                     = 0x26,
+  CEC_USER_CONTROL_CODE_NUMBER7                     = 0x27,
+  CEC_USER_CONTROL_CODE_NUMBER8                     = 0x28,
+  CEC_USER_CONTROL_CODE_NUMBER9                     = 0x29,
+  CEC_USER_CONTROL_CODE_DOT                         = 0x2A,
+  CEC_USER_CONTROL_CODE_ENTER                       = 0x2B,
+  CEC_USER_CONTROL_CODE_CLEAR                       = 0x2C,
+  CEC_USER_CONTROL_CODE_NEXT_FAVORITE               = 0x2F,
+  CEC_USER_CONTROL_CODE_CHANNEL_UP                  = 0x30,
+  CEC_USER_CONTROL_CODE_CHANNEL_DOWN                = 0x31,
+  CEC_USER_CONTROL_CODE_PREVIOUS_CHANNEL            = 0x32,
+  CEC_USER_CONTROL_CODE_SOUND_SELECT                = 0x33,
+  CEC_USER_CONTROL_CODE_INPUT_SELECT                = 0x34,
+  CEC_USER_CONTROL_CODE_DISPLAY_INFORMATION         = 0x35,
+  CEC_USER_CONTROL_CODE_HELP                        = 0x36,
+  CEC_USER_CONTROL_CODE_PAGE_UP                     = 0x37,
+  CEC_USER_CONTROL_CODE_PAGE_DOWN                   = 0x38,
+  // reserved: 0x39 ... 0x3F
+  CEC_USER_CONTROL_CODE_POWER                       = 0x40,
+  CEC_USER_CONTROL_CODE_VOLUME_UP                   = 0x41,
+  CEC_USER_CONTROL_CODE_VOLUME_DOWN                 = 0x42,
+  CEC_USER_CONTROL_CODE_MUTE                        = 0x43,
+  CEC_USER_CONTROL_CODE_PLAY                        = 0x44,
+  CEC_USER_CONTROL_CODE_STOP                        = 0x45,
+  CEC_USER_CONTROL_CODE_PAUSE                       = 0x46,
+  CEC_USER_CONTROL_CODE_RECORD                      = 0x47,
+  CEC_USER_CONTROL_CODE_REWIND                      = 0x48,
+  CEC_USER_CONTROL_CODE_FAST_FORWARD                = 0x49,
+  CEC_USER_CONTROL_CODE_EJECT                       = 0x4A,
+  CEC_USER_CONTROL_CODE_FORWARD                     = 0x4B,
+  CEC_USER_CONTROL_CODE_BACKWARD                    = 0x4C,
+  CEC_USER_CONTROL_CODE_STOP_RECORD                 = 0x4D,
+  CEC_USER_CONTROL_CODE_PAUSE_RECORD                = 0x4E,
+  // reserved: 0x4F
+  CEC_USER_CONTROL_CODE_ANGLE                       = 0x50,
+  CEC_USER_CONTROL_CODE_SUB_PICTURE                 = 0x51,
+  CEC_USER_CONTROL_CODE_VIDEO_ON_DEMAND             = 0x52,
+  CEC_USER_CONTROL_CODE_ELECTRONIC_PROGRAM_GUIDE    = 0x53,
+  CEC_USER_CONTROL_CODE_TIMER_PROGRAMMING           = 0x54,
+  CEC_USER_CONTROL_CODE_INITIAL_CONFIGURATION       = 0x55,
+  CEC_USER_CONTROL_CODE_SELECT_BROADCAST_TYPE       = 0x56,
+  CEC_USER_CONTROL_CODE_SELECT_SOUND_PRESENTATION   = 0x57,
+  // reserved: 0x58 ... 0x5F
+  CEC_USER_CONTROL_CODE_PLAY_FUNCTION               = 0x60,
+  CEC_USER_CONTROL_CODE_PAUSE_PLAY_FUNCTION         = 0x61,
+  CEC_USER_CONTROL_CODE_RECORD_FUNCTION             = 0x62,
+  CEC_USER_CONTROL_CODE_PAUSE_RECORD_FUNCTION       = 0x63,
+  CEC_USER_CONTROL_CODE_STOP_FUNCTION               = 0x64,
+  CEC_USER_CONTROL_CODE_MUTE_FUNCTION               = 0x65,
+  CEC_USER_CONTROL_CODE_RESTORE_VOLUME_FUNCTION     = 0x66,
+  CEC_USER_CONTROL_CODE_TUNE_FUNCTION               = 0x67,
+  CEC_USER_CONTROL_CODE_SELECT_MEDIA_FUNCTION       = 0x68,
+  CEC_USER_CONTROL_CODE_SELECT_AV_INPUT_FUNCTION    = 0x69,
+  CEC_USER_CONTROL_CODE_SELECT_AUDIO_INPUT_FUNCTION = 0x6A,
+  CEC_USER_CONTROL_CODE_POWER_TOGGLE_FUNCTION       = 0x6B,
+  CEC_USER_CONTROL_CODE_POWER_OFF_FUNCTION          = 0x6C,
+  CEC_USER_CONTROL_CODE_POWER_ON_FUNCTION           = 0x6D,
+  // reserved: 0x6E ... 0x70
+  CEC_USER_CONTROL_CODE_F1_BLUE                     = 0x71,
+  CEC_USER_CONTROL_CODE_F2_RED                      = 0X72,
+  CEC_USER_CONTROL_CODE_F3_GREEN                    = 0x73,
+  CEC_USER_CONTROL_CODE_F4_YELLOW                   = 0x74,
+  CEC_USER_CONTROL_CODE_F5                          = 0x75,
+  CEC_USER_CONTROL_CODE_DATA                        = 0x76,
+  // reserved: 0x77 ... 0xFF
+  CEC_USER_CONTROL_CODE_AN_RETURN                   = 0x91, // return (Samsung)
+  CEC_USER_CONTROL_CODE_AN_CHANNELS_LIST            = 0x96, // channels list (Samsung)
+  CEC_USER_CONTROL_CODE_MAX                         = 0x96,
+  CEC_USER_CONTROL_CODE_UNKNOWN                     = 0xFF
+} cec_user_control_code;
+
+typedef enum cec_logical_address
+{
+  CECDEVICE_UNKNOWN          = -1, //not a valid logical address
+  CECDEVICE_TV               = 0,
+  CECDEVICE_RECORDINGDEVICE1 = 1,
+  CECDEVICE_RECORDINGDEVICE2 = 2,
+  CECDEVICE_TUNER1           = 3,
+  CECDEVICE_PLAYBACKDEVICE1  = 4,
+  CECDEVICE_AUDIOSYSTEM      = 5,
+  CECDEVICE_TUNER2           = 6,
+  CECDEVICE_TUNER3           = 7,
+  CECDEVICE_PLAYBACKDEVICE2  = 8,
+  CECDEVICE_RECORDINGDEVICE3 = 9,
+  CECDEVICE_TUNER4           = 10,
+  CECDEVICE_PLAYBACKDEVICE3  = 11,
+  CECDEVICE_RESERVED1        = 12,
+  CECDEVICE_RESERVED2        = 13,
+  CECDEVICE_FREEUSE          = 14,
+  CECDEVICE_UNREGISTERED     = 15,
+  CECDEVICE_BROADCAST        = 15
+} cec_logical_address;
+
+typedef enum cec_opcode
+{
+  CEC_OPCODE_ACTIVE_SOURCE                 = 0x82,
+  CEC_OPCODE_IMAGE_VIEW_ON                 = 0x04,
+  CEC_OPCODE_TEXT_VIEW_ON                  = 0x0D,
+  CEC_OPCODE_INACTIVE_SOURCE               = 0x9D,
+  CEC_OPCODE_REQUEST_ACTIVE_SOURCE         = 0x85,
+  CEC_OPCODE_ROUTING_CHANGE                = 0x80,
+  CEC_OPCODE_ROUTING_INFORMATION           = 0x81,
+  CEC_OPCODE_SET_STREAM_PATH               = 0x86,
+  CEC_OPCODE_STANDBY                       = 0x36,
+  CEC_OPCODE_RECORD_OFF                    = 0x0B,
+  CEC_OPCODE_RECORD_ON                     = 0x09,
+  CEC_OPCODE_RECORD_STATUS                 = 0x0A,
+  CEC_OPCODE_RECORD_TV_SCREEN              = 0x0F,
+  CEC_OPCODE_CLEAR_ANALOGUE_TIMER          = 0x33,
+  CEC_OPCODE_CLEAR_DIGITAL_TIMER           = 0x99,
+  CEC_OPCODE_CLEAR_EXTERNAL_TIMER          = 0xA1,
+  CEC_OPCODE_SET_ANALOGUE_TIMER            = 0x34,
+  CEC_OPCODE_SET_DIGITAL_TIMER             = 0x97,
+  CEC_OPCODE_SET_EXTERNAL_TIMER            = 0xA2,
+  CEC_OPCODE_SET_TIMER_PROGRAM_TITLE       = 0x67,
+  CEC_OPCODE_TIMER_CLEARED_STATUS          = 0x43,
+  CEC_OPCODE_TIMER_STATUS                  = 0x35,
+  CEC_OPCODE_CEC_VERSION                   = 0x9E,
+  CEC_OPCODE_GET_CEC_VERSION               = 0x9F,
+  CEC_OPCODE_GIVE_PHYSICAL_ADDRESS         = 0x83,
+  CEC_OPCODE_GET_MENU_LANGUAGE             = 0x91,
+  CEC_OPCODE_REPORT_PHYSICAL_ADDRESS       = 0x84,
+  CEC_OPCODE_SET_MENU_LANGUAGE             = 0x32,
+  CEC_OPCODE_DECK_CONTROL                  = 0x42,
+  CEC_OPCODE_DECK_STATUS                   = 0x1B,
+  CEC_OPCODE_GIVE_DECK_STATUS              = 0x1A,
+  CEC_OPCODE_PLAY                          = 0x41,
+  CEC_OPCODE_GIVE_TUNER_DEVICE_STATUS      = 0x08,
+  CEC_OPCODE_SELECT_ANALOGUE_SERVICE       = 0x92,
+  CEC_OPCODE_SELECT_DIGITAL_SERVICE        = 0x93,
+  CEC_OPCODE_TUNER_DEVICE_STATUS           = 0x07,
+  CEC_OPCODE_TUNER_STEP_DECREMENT          = 0x06,
+  CEC_OPCODE_TUNER_STEP_INCREMENT          = 0x05,
+  CEC_OPCODE_DEVICE_VENDOR_ID              = 0x87,
+  CEC_OPCODE_GIVE_DEVICE_VENDOR_ID         = 0x8C,
+  CEC_OPCODE_VENDOR_COMMAND                = 0x89,
+  CEC_OPCODE_VENDOR_COMMAND_WITH_ID        = 0xA0,
+  CEC_OPCODE_VENDOR_REMOTE_BUTTON_DOWN     = 0x8A,
+  CEC_OPCODE_VENDOR_REMOTE_BUTTON_UP       = 0x8B,
+  CEC_OPCODE_SET_OSD_STRING                = 0x64,
+  CEC_OPCODE_GIVE_OSD_NAME                 = 0x46,
+  CEC_OPCODE_SET_OSD_NAME                  = 0x47,
+  CEC_OPCODE_MENU_REQUEST                  = 0x8D,
+  CEC_OPCODE_MENU_STATUS                   = 0x8E,
+  CEC_OPCODE_USER_CONTROL_PRESSED          = 0x44,
+  CEC_OPCODE_USER_CONTROL_RELEASE          = 0x45,
+  CEC_OPCODE_GIVE_DEVICE_POWER_STATUS      = 0x8F,
+  CEC_OPCODE_REPORT_POWER_STATUS           = 0x90,
+  CEC_OPCODE_FEATURE_ABORT                 = 0x00,
+  CEC_OPCODE_ABORT                         = 0xFF,
+  CEC_OPCODE_GIVE_AUDIO_STATUS             = 0x71,
+  CEC_OPCODE_GIVE_SYSTEM_AUDIO_MODE_STATUS = 0x7D,
+  CEC_OPCODE_REPORT_AUDIO_STATUS           = 0x7A,
+  CEC_OPCODE_SET_SYSTEM_AUDIO_MODE         = 0x72,
+  CEC_OPCODE_SYSTEM_AUDIO_MODE_REQUEST     = 0x70,
+  CEC_OPCODE_SYSTEM_AUDIO_MODE_STATUS      = 0x7E,
+  CEC_OPCODE_SET_AUDIO_RATE                = 0x9A,
+
+  /* CEC 1.4 */
+  CEC_OPCODE_START_ARC                     = 0xC0,
+  CEC_OPCODE_REPORT_ARC_STARTED            = 0xC1,
+  CEC_OPCODE_REPORT_ARC_ENDED              = 0xC2,
+  CEC_OPCODE_REQUEST_ARC_START             = 0xC3,
+  CEC_OPCODE_REQUEST_ARC_END               = 0xC4,
+  CEC_OPCODE_END_ARC                       = 0xC5,
+  CEC_OPCODE_CDC                           = 0xF8,
+  /* when this opcode is set, no opcode will be sent to the device. this is one of the reserved numbers */
+  CEC_OPCODE_NONE                          = 0xFD
+} cec_opcode;
+
+typedef enum cec_log_level
+{
+  CEC_LOG_ERROR   = 1,
+  CEC_LOG_WARNING = 2,
+  CEC_LOG_NOTICE  = 4,
+  CEC_LOG_TRAFFIC = 8,
+  CEC_LOG_DEBUG   = 16,
+  CEC_LOG_ALL     = 31
+} cec_log_level;
+
+typedef enum cec_bus_device_status
+{
+  CEC_DEVICE_STATUS_UNKNOWN,
+  CEC_DEVICE_STATUS_PRESENT,
+  CEC_DEVICE_STATUS_NOT_PRESENT,
+  CEC_DEVICE_STATUS_HANDLED_BY_LIBCEC
+} cec_bus_device_status;
+
+typedef enum cec_vendor_id
+{
+  CEC_VENDOR_TOSHIBA        = 0x000039,
+  CEC_VENDOR_SAMSUNG        = 0x0000F0,
+  CEC_VENDOR_DENON          = 0x0005CD,
+  CEC_VENDOR_MARANTZ        = 0x000678,
+  CEC_VENDOR_LOEWE          = 0x000982,
+  CEC_VENDOR_ONKYO          = 0x0009B0,
+  CEC_VENDOR_MEDION         = 0x000CB8,
+  CEC_VENDOR_TOSHIBA2       = 0x000CE7,
+  CEC_VENDOR_PULSE_EIGHT    = 0x001582,
+  CEC_VENDOR_HARMAN_KARDON2 = 0x001950,
+  CEC_VENDOR_GOOGLE         = 0x001A11,
+  CEC_VENDOR_AKAI           = 0x0020C7,
+  CEC_VENDOR_AOC            = 0x002467,
+  CEC_VENDOR_PANASONIC      = 0x008045,
+  CEC_VENDOR_PHILIPS        = 0x00903E,
+  CEC_VENDOR_DAEWOO         = 0x009053,
+  CEC_VENDOR_YAMAHA         = 0x00A0DE,
+  CEC_VENDOR_GRUNDIG        = 0x00D0D5,
+  CEC_VENDOR_PIONEER        = 0x00E036,
+  CEC_VENDOR_LG             = 0x00E091,
+  CEC_VENDOR_SHARP          = 0x08001F,
+  CEC_VENDOR_SONY           = 0x080046,
+  CEC_VENDOR_BROADCOM       = 0x18C086,
+  CEC_VENDOR_SHARP2         = 0x534850,
+  CEC_VENDOR_VIZIO          = 0x6B746D,
+  CEC_VENDOR_BENQ           = 0x8065E9,
+  CEC_VENDOR_HARMAN_KARDON  = 0x9C645E,
+  CEC_VENDOR_UNKNOWN        = 0
+} cec_vendor_id;
+
+typedef enum cec_adapter_type
+{
+  ADAPTERTYPE_UNKNOWN          = 0,
+  ADAPTERTYPE_P8_EXTERNAL      = 0x1,
+  ADAPTERTYPE_P8_DAUGHTERBOARD = 0x2,
+  ADAPTERTYPE_RPI              = 0x100,
+  ADAPTERTYPE_TDA995x          = 0x200,
+  ADAPTERTYPE_EXYNOS           = 0x300
+} cec_adapter_type;
+
+/** force exporting through swig */
+enum libcec_version
+{
+  LIBCEC_VERSION_CURRENT = _LIBCEC_VERSION_CURRENT
+};
+
+typedef struct cec_menu_language
+{
+  char                language[4]; /**< the iso language code. @bug the language code is only 3 chars long, not 4. will be changed in v2.0, because changing it now would break backwards compat */
+  cec_logical_address device;      /**< the logical address of the device */
+} cec_menu_language;
+
+typedef struct cec_osd_name
+{
+  char                name[14]; /**< the name of the device */
+  cec_logical_address device;   /**< the logical address of the device */
+} cec_osd_name;
+
+typedef struct cec_log_message
+{
+  char          message[1024]; /**< the actual message */
+  cec_log_level level;         /**< log level of the message */
+  int64_t       time;          /**< the timestamp of this message */
+} cec_log_message;
+
+typedef struct cec_keypress
+{
+  cec_user_control_code keycode;  /**< the keycode */
+  unsigned int          duration; /**< the duration of the keypress */
+} cec_keypress;
+
+typedef struct cec_adapter
+{
+  char path[1024]; /**< the path to the com port */
+  char comm[1024]; /**< the name of the com port */
+} cec_adapter;
+
+typedef struct cec_adapter_descriptor
+{
+  char             strComPath[1024]; /**< the path to the com port */
+  char             strComName[1024]; /**< the name of the com port */
+  uint16_t         iVendorId;
+  uint16_t         iProductId;
+  uint16_t         iFirmwareVersion;
+  uint16_t         iPhysicalAddress;
+  uint32_t         iFirmwareBuildDate;
+  cec_adapter_type adapterType;
+} cec_adapter_descriptor;
+
+#if defined(__cplusplus)
+typedef struct AdapterDescriptor
+{
+  AdapterDescriptor(void) :
+    iVendorId(0),
+    iProductId(0),
+    iFirmwareVersion(0),
+    iPhysicalAddress(0),
+    iFirmwareBuildDate(0)
+  {
+  }
+
+  AdapterDescriptor(const cec_adapter_descriptor& other)
+  {
+    strComPath         = other.strComPath;
+    strComName         = other.strComName;
+    iVendorId          = other.iVendorId;
+    iProductId         = other.iProductId;
+    iFirmwareVersion   = other.iFirmwareVersion;
+    iPhysicalAddress   = other.iPhysicalAddress;
+    iFirmwareBuildDate = other.iFirmwareBuildDate;
+    adapterType        = other.adapterType;
+  }
+
+  std::string strComPath; /**< the path to the com port */
+  std::string strComName; /**< the name of the com port */
+  uint16_t    iVendorId;
+  uint16_t    iProductId;
+  uint16_t    iFirmwareVersion;
+  uint16_t    iPhysicalAddress;
+  uint32_t    iFirmwareBuildDate;
+  cec_adapter_type adapterType;
+} AdapterDescriptor;
+#endif
+
+typedef struct cec_datapacket
+{
+  uint8_t data[100]; /**< the actual data */
+  uint8_t size;      /**< the size of the data */
+
+#ifdef __cplusplus
+  cec_datapacket &operator =(const struct cec_datapacket &packet)
+  {
+    Clear();
+    for (uint8_t iPtr = 0; iPtr < packet.size; iPtr++)
+      PushBack(packet[iPtr]);
+
+    return *this;
+  }
+
+  bool operator ==(const struct cec_datapacket& packet) const
+  {
+    if (size != packet.size)
+      return false;
+    for (uint8_t iPtr = 0; iPtr < size; iPtr++)
+      if (packet.data[iPtr] != data[iPtr])
+        return false;
+    return true;
+  }
+
+  bool    IsEmpty(void) const             { return size == 0; }   /**< @return True when this packet is empty, false otherwise. */
+  bool    IsFull(void) const              { return size == 100; } /**< @return True when this packet is false, false otherwise. */
+
+  /*!
+   * @brief Get the byte at the requested position.
+   * @param pos The position.
+   * @return The byte, or 0 when out of bounds.
+   */
+  uint8_t operator[](uint8_t pos) const { return pos < size ? data[pos] : 0; }
+  /*!
+   * @brief Get the byte at the requested position.
+   * @param pos The position.
+   * @return The byte, or 0 when out of bounds.
+   */
+  uint8_t At(uint8_t pos) const         { return pos < size ? data[pos] : 0; }
+
+  /*!
+   * @brief Shift the contents of this packet.
+   * @param iShiftBy The number of positions to shift.
+   */
+  void Shift(uint8_t iShiftBy)
+  {
+    if (iShiftBy >= size)
+    {
+      Clear();
+    }
+    else
+    {
+      for (uint8_t iPtr = 0; iPtr < size; iPtr++)
+        data[iPtr] = (iPtr + iShiftBy < size) ? data[iPtr + iShiftBy] : 0;
+      size = (uint8_t) (size - iShiftBy);
+    }
+  }
+
+  /*!
+   * @brief Push a byte to the end of this packet.
+   * @param add The byte to add.
+   */
+  void PushBack(uint8_t add)
+  {
+    if (size < 100)
+      data[size++] = add;
+  }
+
+  /*!
+   * @brief Clear this packet.
+   */
+  void Clear(void)
+  {
+    memset(data, 0, sizeof(data));
+    size = 0;
+  }
+#endif
+
+} cec_datapacket;
+
+typedef struct cec_command
+{
+  cec_logical_address initiator;        /**< the logical address of the initiator of this message */
+  cec_logical_address destination;      /**< the logical address of the destination of this message */
+  int8_t              ack;              /**< 1 when the ACK bit is set, 0 otherwise */
+  int8_t              eom;              /**< 1 when the EOM bit is set, 0 otherwise */
+  cec_opcode          opcode;           /**< the opcode of this message */
+  cec_datapacket      parameters;       /**< the parameters attached to this message */
+  int8_t              opcode_set;       /**< 1 when an opcode is set, 0 otherwise (POLL message) */
+  int32_t             transmit_timeout; /**< the timeout to use in ms */
+
+#ifdef __cplusplus
+  cec_command(void)
+  {
+    Clear();
+  }
+
+  cec_command &operator =(const struct cec_command &command)
+  {
+    initiator        = command.initiator;
+    destination      = command.destination;
+    ack              = command.ack;
+    eom              = command.eom;
+    opcode           = command.opcode;
+    opcode_set       = command.opcode_set;
+    transmit_timeout = command.transmit_timeout;
+    parameters       = command.parameters;
+
+    return *this;
+  }
+
+  /*!
+   * @brief Formats a cec_command.
+   * @param command The command to format.
+   * @param initiator The logical address of the initiator.
+   * @param destination The logical addres of the destination.
+   * @param opcode The opcode of the command.
+   * @param timeout The transmission timeout.
+   */
+  static void Format(cec_command &command, cec_logical_address initiator, cec_logical_address destination, cec_opcode opcode, int32_t timeout = CEC_DEFAULT_TRANSMIT_TIMEOUT)
+  {
+    command.Clear();
+    command.initiator        = initiator;
+    command.destination      = destination;
+    command.transmit_timeout = timeout;
+    if (opcode != CEC_OPCODE_NONE)
+    {
+      command.opcode     = opcode;
+      command.opcode_set = 1;
+    }
+  }
+
+  /*!
+   * @brief Push a byte to the back of this command.
+   * @param data The byte to push.
+   */
+  void PushBack(uint8_t data)
+  {
+    if (initiator == CECDEVICE_UNKNOWN && destination == CECDEVICE_UNKNOWN)
+    {
+      initiator   = (cec_logical_address) (data >> 4);
+      destination = (cec_logical_address) (data & 0xF);
+    }
+    else if (!opcode_set)
+    {
+      opcode_set = 1;
+      opcode = (cec_opcode) data;
+    }
+    else
+      parameters.PushBack(data);
+  }
+
+  /*!
+   * @brief Clear this command, resetting everything to the default values.
+   */
+  void Clear(void)
+  {
+    initiator        = CECDEVICE_UNKNOWN;
+    destination      = CECDEVICE_UNKNOWN;
+    ack              = 0;
+    eom              = 0;
+    opcode_set       = 0;
+    opcode           = CEC_OPCODE_FEATURE_ABORT;
+    transmit_timeout = CEC_DEFAULT_TRANSMIT_TIMEOUT;
+    parameters.Clear();
+  };
+
+  static cec_opcode GetResponseOpcode(cec_opcode opcode)
+  {
+    switch (opcode)
+    {
+    case CEC_OPCODE_REQUEST_ACTIVE_SOURCE:
+      return CEC_OPCODE_ACTIVE_SOURCE;
+    case CEC_OPCODE_GET_CEC_VERSION:
+      return CEC_OPCODE_CEC_VERSION;
+    case CEC_OPCODE_GIVE_PHYSICAL_ADDRESS:
+      return CEC_OPCODE_REPORT_PHYSICAL_ADDRESS;
+    case CEC_OPCODE_GET_MENU_LANGUAGE:
+      return CEC_OPCODE_SET_MENU_LANGUAGE;
+    case CEC_OPCODE_GIVE_DECK_STATUS:
+      return CEC_OPCODE_DECK_STATUS;
+    case CEC_OPCODE_GIVE_TUNER_DEVICE_STATUS:
+      return CEC_OPCODE_TUNER_DEVICE_STATUS;
+    case CEC_OPCODE_GIVE_DEVICE_VENDOR_ID:
+      return CEC_OPCODE_DEVICE_VENDOR_ID;
+    case CEC_OPCODE_GIVE_OSD_NAME:
+      return CEC_OPCODE_SET_OSD_NAME;
+    case CEC_OPCODE_MENU_REQUEST:
+      return CEC_OPCODE_MENU_STATUS;
+    case CEC_OPCODE_GIVE_DEVICE_POWER_STATUS:
+      return CEC_OPCODE_REPORT_POWER_STATUS;
+    case CEC_OPCODE_GIVE_AUDIO_STATUS:
+      return CEC_OPCODE_REPORT_AUDIO_STATUS;
+    case CEC_OPCODE_GIVE_SYSTEM_AUDIO_MODE_STATUS:
+      return CEC_OPCODE_SYSTEM_AUDIO_MODE_STATUS;
+    case CEC_OPCODE_SYSTEM_AUDIO_MODE_REQUEST:
+      return CEC_OPCODE_SET_SYSTEM_AUDIO_MODE;
+    default:
+      break;
+    }
+
+    return CEC_OPCODE_NONE;
+  }
+
+  void PushArray(size_t len, uint8_t *data)
+  {
+    for (size_t iPtr = 0; iPtr < len; iPtr++)
+      PushBack(data[iPtr]);
+  }
+#endif
+} cec_command;
+
+typedef struct cec_device_type_list
+{
+  cec_device_type types[5]; /**< the list of device types */
+
+#ifdef __cplusplus
+  /*!
+   * @brief Clear this list.
+   */
+  void Clear(void)
+  {
+    for (unsigned int iPtr = 0; iPtr < 5; iPtr++)
+     types[iPtr] = CEC_DEVICE_TYPE_RESERVED;
+  }
+
+  /*!
+   * @brief Add a type to this list.
+   * @param type The type to add.
+   */
+  void Add(const cec_device_type type)
+  {
+    for (unsigned int iPtr = 0; iPtr < 5; iPtr++)
+    {
+      if (types[iPtr] == CEC_DEVICE_TYPE_RESERVED)
+      {
+        types[iPtr] = type;
+        break;
+      }
+    }
+  }
+
+  /*!
+   * @brief Check whether a type is set in this list.
+   * @param type The type to check.
+   * @return True when set, false otherwise.
+   */
+  bool IsSet(cec_device_type type)
+  {
+    bool bReturn(false);
+    for (unsigned int iPtr = 0; !bReturn && iPtr < 5; iPtr++)
+    {
+      if (types[iPtr] == type)
+        bReturn = true;
+    }
+    return bReturn;
+  }
+
+  /*!
+   * @return True when this list is empty, false otherwise.
+   */
+  bool IsEmpty() const
+  {
+    bool bReturn(true);
+    for (unsigned int iPtr = 0; bReturn && iPtr < 5; iPtr++)
+    {
+      if (types[iPtr] != CEC_DEVICE_TYPE_RESERVED)
+        bReturn = false;
+    }
+    return bReturn;
+  }
+
+  /*!
+   * @brief Get the type at the requested position.
+   * @param pos The position.
+   * @return The type, or CEC_DEVICE_TYPE_RESERVED when out of bounds.
+   */
+  cec_device_type operator[](uint8_t pos) const { return pos < 5 ? types[pos] : CEC_DEVICE_TYPE_RESERVED; }
+
+  bool operator==(const cec_device_type_list &other) const
+  {
+    bool bEqual(true);
+    for (uint8_t iPtr = 0; iPtr < 5; iPtr++)
+      bEqual &= (types[iPtr] == other[iPtr]);
+    return bEqual;
+  }
+
+  bool operator!=(const cec_device_type_list &other) const
+  {
+    return !(*this == other);
+  }
+#endif
+} cec_device_type_list;
+
+typedef struct cec_logical_addresses
+{
+  cec_logical_address primary;       /**< the primary logical address to use */
+  int                 addresses[16]; /**< the list of addresses */
+
+#ifdef __cplusplus
+  /*!
+   * @brief Clear this list.
+   */
+  void Clear(void)
+  {
+    primary = CECDEVICE_UNREGISTERED;
+    for (unsigned int iPtr = 0; iPtr < 16; iPtr++)
+      addresses[iPtr] = 0;
+  }
+
+  /*!
+   * @return True when empty, false otherwise.
+   */
+  bool IsEmpty(void) const
+  {
+    return primary == CECDEVICE_UNREGISTERED;
+  }
+
+  /*!
+   * @brief Calculate the ack-mask for this list, the mask to use when determining whether to send an ack message or not.
+   * @return The ack-mask.
+   */
+  uint16_t AckMask(void) const
+  {
+    uint16_t mask = 0;
+    for (unsigned int iPtr = 0; iPtr < 16; iPtr++)
+      if (addresses[iPtr] == 1)
+        mask |= 0x1 << iPtr;
+    return mask;
+  }
+
+  /*!
+   * @brief Mark a logical address as 'set'
+   * @param address The logical address to add to this list.
+   */
+  void Set(cec_logical_address address)
+  {
+    if (primary == CECDEVICE_UNREGISTERED)
+      primary = address;
+
+    addresses[(int) address] = 1;
+  }
+
+  /*!
+   * @brief Mark a logical address as 'unset'
+   * @param address The logical address to remove from this list.
+   */
+  void Unset(const cec_logical_address address)
+  {
+    if (primary == address)
+      primary = CECDEVICE_UNREGISTERED;
+
+    addresses[(int) address] = 0;
+  }
+
+  /*!
+   * @brief Check whether an address is set in this list.
+   * @param address The address to check.
+   * @return True when set, false otherwise.
+   */
+  bool IsSet(cec_logical_address address) const { return addresses[(int) address] == 1; }
+
+  /*!
+   * @brief Check whether an address is set in this list.
+   * @param pos The address to check.
+   * @return True when set, false otherwise.
+   */
+  bool operator[](uint8_t pos) const { return pos < 16 ? IsSet((cec_logical_address) pos) : false; }
+
+  bool operator==(const cec_logical_addresses &other) const
+  {
+    bool bEqual(true);
+    for (uint8_t iPtr = 0; iPtr < 16; iPtr++)
+      bEqual &= ((addresses[(int)iPtr] == 1) == other[iPtr]);
+    return bEqual;
+  }
+
+  bool operator!=(const cec_logical_addresses &other) const
+  {
+    return !(*this == other);
+  }
+#endif
+} cec_logical_addresses;
+
+typedef enum libcec_alert
+{
+  CEC_ALERT_SERVICE_DEVICE,
+  CEC_ALERT_CONNECTION_LOST,
+  CEC_ALERT_PERMISSION_ERROR,
+  CEC_ALERT_PORT_BUSY,
+  CEC_ALERT_PHYSICAL_ADDRESS_ERROR,
+  CEC_ALERT_TV_POLL_FAILED
+} libcec_alert;
+
+typedef enum libcec_parameter_type
+{
+  CEC_PARAMETER_TYPE_STRING,
+  CEC_PARAMETER_TYPE_UNKOWN
+} libcec_parameter_type;
+
+typedef struct libcec_parameter
+{
+  libcec_parameter_type paramType; /**< the type of this parameter */
+  void*                 paramData; /**< the value of this parameter */
+} libcec_parameter;
+
+typedef struct libcec_configuration libcec_configuration;
+
+typedef int (CEC_CDECL* CBCecLogMessageType)(void*, const cec_log_message);
+typedef int (CEC_CDECL* CBCecKeyPressType)(void*, const cec_keypress);
+typedef int (CEC_CDECL* CBCecCommandType)(void*, const cec_command);
+typedef int (CEC_CDECL* CBCecConfigurationChangedType)(void*, const libcec_configuration);
+typedef int (CEC_CDECL* CBCecAlertType)(void*, const libcec_alert, const libcec_parameter);
+typedef int (CEC_CDECL* CBCecMenuStateChangedType)(void*, const cec_menu_state);
+typedef void (CEC_CDECL* CBCecSourceActivatedType)(void*, const cec_logical_address, const uint8_t);
+
+typedef struct ICECCallbacks
+{
+  /*!
+   * @brief Transfer a log message from libCEC to the client.
+   * @param message The message to transfer.
+   * @return 1 when ok, 0 otherwise.
+   */
+  CBCecLogMessageType CBCecLogMessage;
+
+  /*!
+   * @brief Transfer a keypress from libCEC to the client.
+   * @param key The keypress to transfer.
+   * @return 1 when ok, 0 otherwise.
+   */
+  CBCecKeyPressType CBCecKeyPress;
+
+  /*!
+   * @brief Transfer a CEC command from libCEC to the client.
+   * @param command The command to transfer.
+   * @return 1 when ok, 0 otherwise.
+   */
+  CBCecCommandType CBCecCommand;
+
+  /*!
+   * @brief Transfer a changed configuration from libCEC to the client
+   * @param configuration The configuration to transfer
+   * @return 1 when ok, 0 otherwise
+   */
+  CBCecConfigurationChangedType CBCecConfigurationChanged;
+
+  /*!
+   * @brief Transfer a libcec alert message from libCEC to the client
+   * @param alert The alert type transfer.
+   * @param data  Misc. additional information.
+   * @return 1 when ok, 0 otherwise
+   */
+  CBCecAlertType CBCecAlert;
+
+  /*!
+   * @brief Transfer a menu state change to the client.
+   * Transfer a menu state change to the client. If the command returns 1, then the change will be processed by
+   * the busdevice. If 0, then the state of the busdevice won't be changed, and will always be kept 'activated',
+   * @warning CEC does not allow the player to suppress the menu state change on the TV, so the menu on the TV will always be displayed, whatever the return value of this method is.
+   * so keypresses are always routed.
+   * @param newVal The new value.
+   * @return 1 when libCEC should use this new value, 0 otherwise.
+   */
+  CBCecMenuStateChangedType CBCecMenuStateChanged;
+
+  /*!
+   * @brief Called when a source that's handled by this client is activated.
+   * @param logicalAddress The address that was just activated.
+   * @param bActivated 1 when activated, 0 when deactivated.
+   */
+  CBCecSourceActivatedType CBCecSourceActivated;
+
+#ifdef __cplusplus
+   ICECCallbacks(void) { Clear(); }
+  ~ICECCallbacks(void) { Clear(); };
+
+  void Clear(void)
+  {
+    CBCecLogMessage           = NULL;
+    CBCecKeyPress             = NULL;
+    CBCecCommand              = NULL;
+    CBCecConfigurationChanged = NULL;
+    CBCecAlert                = NULL;
+    CBCecMenuStateChanged     = NULL;
+    CBCecSourceActivated      = NULL;
+  }
+#endif
+} ICECCallbacks;
+
+struct libcec_configuration
+{
+  uint32_t              clientVersion;        /*!< the version of the client that is connecting */
+  char                  strDeviceName[13];    /*!< the device name to use on the CEC bus */
+  cec_device_type_list  deviceTypes;          /*!< the device type(s) to use on the CEC bus for libCEC */
+  uint8_t               bAutodetectAddress;   /*!< (read only) set to 1 by libCEC when the physical address was autodetected */
+  uint16_t              iPhysicalAddress;     /*!< the physical address of the CEC adapter */
+  cec_logical_address   baseDevice;           /*!< the logical address of the device to which the adapter is connected. only used when iPhysicalAddress = 0 or when the adapter doesn't support autodetection */
+  uint8_t               iHDMIPort;            /*!< the HDMI port to which the adapter is connected. only used when iPhysicalAddress = 0 or when the adapter doesn't support autodetection */
+  uint32_t              tvVendor;             /*!< override the vendor ID of the TV. leave this untouched to autodetect */
+  cec_logical_addresses wakeDevices;          /*!< list of devices to wake when initialising libCEC or when calling PowerOnDevices() without any parameter. */
+  cec_logical_addresses powerOffDevices;      /*!< list of devices to power off when calling StandbyDevices() without any parameter. */
+
+  uint32_t              serverVersion;        /*!< the version number of the server. read-only */
+
+  // player specific settings
+  uint8_t               bGetSettingsFromROM;  /*!< true to get the settings from the ROM (if set, and a v2 ROM is present), false to use these settings. */
+  uint8_t               bUseTVMenuLanguage;   /*!< use the menu language of the TV in the player application */
+  uint8_t               bActivateSource;      /*!< make libCEC the active source on the bus when starting the player application */
+  uint8_t               bPowerOffScreensaver; /*!< put devices in standby mode when activating the screensaver */
+  uint8_t               bPowerOnScreensaver;  /*!< wake devices when deactivating the screensaver */
+  uint8_t               bPowerOffOnStandby;   /*!< put this PC in standby mode when the TV is switched off. only used when bShutdownOnStandby = 0  */
+  uint8_t               bSendInactiveSource;  /*!< send an 'inactive source' message when stopping the player. added in 1.5.1 */
+
+  void *                callbackParam;        /*!< the object to pass along with a call of the callback methods. NULL to ignore */
+  ICECCallbacks *       callbacks;            /*!< the callback methods to use. set this to NULL when not using callbacks */
+
+  cec_logical_addresses logicalAddresses;     /*!< (read-only) the current logical addresses. added in 1.5.3 */
+  uint16_t              iFirmwareVersion;     /*!< (read-only) the firmware version of the adapter. added in 1.6.0 */
+  uint8_t               bPowerOffDevicesOnStandby; /*!< put devices in standby when the PC/player is put in standby. added in 1.6.0 */
+  uint8_t               bShutdownOnStandby;   /*!< shutdown this PC when the TV is switched off. only used when bPowerOffOnStandby = 0. added in 1.6.0 */
+  char                  strDeviceLanguage[3]; /*!< the menu language used by the client. 3 character ISO 639-2 country code. see http://http://www.loc.gov/standards/iso639-2/ added in 1.6.2 */
+  uint32_t              iFirmwareBuildDate;   /*!< (read-only) the build date of the firmware, in seconds since epoch. if not available, this value will be set to 0. added in 1.6.2 */
+  uint8_t               bMonitorOnly;         /*!< won't allocate a CCECClient when starting the connection when set (same as monitor mode). added in 1.6.3 */
+  cec_version           cecVersion;           /*!< CEC spec version to use by libCEC. defaults to v1.4. added in 1.8.0 */
+  cec_adapter_type      adapterType;          /*!< type of the CEC adapter that we're connected to. added in 1.8.2 */
+  uint8_t               iDoubleTapTimeout50Ms;  /*!< prevent double taps withing this timeout, in units of 50ms. defaults to 200ms (value: 4). added in 2.0.0,
+                                                   XXX changed meaning in 2.2.0 to not break binary compatibility. next major (3.0) release will fix it in a nicer way */
+  cec_user_control_code comboKey;             /*!< key code that initiates combo keys. defaults to CEC_USER_CONTROL_CODE_F1_BLUE. CEC_USER_CONTROL_CODE_UNKNOWN to disable. added in 2.0.5 */
+  uint32_t              iComboKeyTimeoutMs;   /*!< timeout until the combo key is sent as normal keypress */
+  uint32_t              iButtonRepeatRateMs;  /*!< rate at which buttons autorepeat. 0 means rely on CEC device */
+  uint32_t              iButtonReleaseDelayMs;/*!< duration after last update until a button is considered released */
+
+#ifdef __cplusplus
+   libcec_configuration(void) { Clear(); }
+  ~libcec_configuration(void) { Clear(); }
+
+  bool operator==(const libcec_configuration &other) const
+  {
+    return (     clientVersion             == other.clientVersion &&
+        !strncmp(strDeviceName,               other.strDeviceName, 13) &&
+                 deviceTypes               == other.deviceTypes &&
+                 bAutodetectAddress        == other.bAutodetectAddress &&
+                 iPhysicalAddress          == other.iPhysicalAddress &&
+                 baseDevice                == other.baseDevice &&
+                 iHDMIPort                 == other.iHDMIPort &&
+                 tvVendor                  == other.tvVendor &&
+                 wakeDevices               == other.wakeDevices &&
+                 powerOffDevices           == other.powerOffDevices &&
+                 serverVersion             == other.serverVersion &&
+                 bGetSettingsFromROM       == other.bGetSettingsFromROM &&
+                 bUseTVMenuLanguage        == other.bUseTVMenuLanguage &&
+                 bActivateSource           == other.bActivateSource &&
+                 bPowerOffScreensaver      == other.bPowerOffScreensaver &&
+                 bPowerOffOnStandby        == other.bPowerOffOnStandby &&
+                 bSendInactiveSource       == other.bSendInactiveSource &&
+                 logicalAddresses          == other.logicalAddresses &&
+                 iFirmwareVersion          == other.iFirmwareVersion &&
+                 bPowerOffDevicesOnStandby == other.bPowerOffDevicesOnStandby &&
+                 bShutdownOnStandby        == other.bShutdownOnStandby &&
+        !strncmp(strDeviceLanguage,           other.strDeviceLanguage, 3) &&
+                 iFirmwareBuildDate        == other.iFirmwareBuildDate &&
+                 bMonitorOnly              == other.bMonitorOnly &&
+                 cecVersion                == other.cecVersion &&
+                 adapterType               == other.adapterType &&
+                 iDoubleTapTimeout50Ms     == other.iDoubleTapTimeout50Ms &&
+                 (other.clientVersion <  LIBCEC_VERSION_TO_UINT(3, 1, 0) || iButtonRepeatRateMs   == other.iButtonRepeatRateMs) &&
+                 (other.clientVersion <  LIBCEC_VERSION_TO_UINT(3, 1, 0) || iButtonReleaseDelayMs == other.iButtonReleaseDelayMs) &&
+                 (other.clientVersion <= LIBCEC_VERSION_TO_UINT(2, 0, 4) || comboKey            == other.comboKey) &&
+                 (other.clientVersion <= LIBCEC_VERSION_TO_UINT(2, 0, 4) || iComboKeyTimeoutMs  == other.iComboKeyTimeoutMs) &&
+                 (other.clientVersion <  LIBCEC_VERSION_TO_UINT(2, 1, 0) || bPowerOnScreensaver == other.bPowerOnScreensaver));
+  }
+
+  bool operator!=(const libcec_configuration &other) const
+  {
+    return !(*this == other);
+  }
+
+  /*!
+   * @brief Reset this configution struct to the default values.
+   */
+  void Clear(void)
+  {
+    iPhysicalAddress =                CEC_PHYSICAL_ADDRESS_TV;
+    baseDevice = (cec_logical_address)CEC_DEFAULT_BASE_DEVICE;
+    iHDMIPort =                       CEC_DEFAULT_HDMI_PORT;
+    tvVendor =              (uint32_t)CEC_VENDOR_UNKNOWN;
+    clientVersion =                   LIBCEC_VERSION_CURRENT;
+    serverVersion =                   LIBCEC_VERSION_CURRENT;
+    bAutodetectAddress =              0;
+    bGetSettingsFromROM =             CEC_DEFAULT_SETTING_GET_SETTINGS_FROM_ROM;
+    bUseTVMenuLanguage =              CEC_DEFAULT_SETTING_USE_TV_MENU_LANGUAGE;
+    bActivateSource =                 CEC_DEFAULT_SETTING_ACTIVATE_SOURCE;
+    bPowerOffScreensaver =            CEC_DEFAULT_SETTING_POWER_OFF_SCREENSAVER;
+    bPowerOnScreensaver =             CEC_DEFAULT_SETTING_POWER_ON_SCREENSAVER;
+    bPowerOffOnStandby =              CEC_DEFAULT_SETTING_POWER_OFF_ON_STANDBY;
+    bShutdownOnStandby =              CEC_DEFAULT_SETTING_SHUTDOWN_ON_STANDBY;
+    bSendInactiveSource =             CEC_DEFAULT_SETTING_SEND_INACTIVE_SOURCE;
+    iFirmwareVersion =                CEC_FW_VERSION_UNKNOWN;
+    bPowerOffDevicesOnStandby =       CEC_DEFAULT_SETTING_POWER_OFF_DEVICES_STANDBY;
+    memcpy(strDeviceLanguage,         CEC_DEFAULT_DEVICE_LANGUAGE, 3);
+    iFirmwareBuildDate =              CEC_FW_BUILD_UNKNOWN;
+    bMonitorOnly =                    0;
+    cecVersion =         (cec_version)CEC_DEFAULT_SETTING_CEC_VERSION;
+    adapterType =                     ADAPTERTYPE_UNKNOWN;
+    iDoubleTapTimeout50Ms =           CEC_DOUBLE_TAP_TIMEOUT_50_MS;
+    comboKey =                        CEC_USER_CONTROL_CODE_STOP;
+    iComboKeyTimeoutMs =              CEC_DEFAULT_COMBO_TIMEOUT_MS;
+    iButtonRepeatRateMs =             0;
+    iButtonReleaseDelayMs =           CEC_BUTTON_TIMEOUT;
+
+    memset(strDeviceName, 0, 13);
+    deviceTypes.Clear();
+    logicalAddresses.Clear();
+    wakeDevices.Clear();
+    powerOffDevices.Clear();
+
+    #if CEC_DEFAULT_SETTING_POWER_OFF_SHUTDOWN == 1
+    powerOffDevices.Set(CECDEVICE_BROADCAST);
+    #endif
+    #if CEC_DEFAULT_SETTING_ACTIVATE_SOURCE == 1
+    wakeDevices.Set(CECDEVICE_TV);
+    #endif
+
+    callbackParam = NULL;
+    callbacks     = NULL;
+  }
+#endif
+};
+
+#ifdef __cplusplus
+};
+};
+#endif
+
+#endif /* CECTYPES_H_ */
diff --git a/src/libcec/CECTypeUtils.h b/src/libcec/CECTypeUtils.h
index 0d0cf17..f6c818a 100644
--- a/src/libcec/CECTypeUtils.h
+++ b/src/libcec/CECTypeUtils.h
@@ -766,6 +766,8 @@ namespace CEC
         return "Raspberry Pi";
       case ADAPTERTYPE_TDA995x:
         return "TDA995x";
+      case ADAPTERTYPE_IMX:
+        return "i.MX";
       default:
         return "unknown";
       }
diff --git a/src/libcec/CECTypeUtils.h.orig b/src/libcec/CECTypeUtils.h.orig
new file mode 100644
index 0000000..0d0cf17
--- /dev/null
+++ b/src/libcec/CECTypeUtils.h.orig
@@ -0,0 +1,796 @@
+#pragma once
+/*
+ * This file is part of the libCEC(R) library.
+ *
+ * libCEC(R) is Copyright (C) 2011-2015 Pulse-Eight Limited.  All rights reserved.
+ * libCEC(R) is an original work, containing original code.
+ *
+ * libCEC(R) is a trademark of Pulse-Eight Limited.
+ *
+ * This program is dual-licensed; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301  USA
+ *
+ *
+ * Alternatively, you can license this library under a commercial license,
+ * please contact Pulse-Eight Licensing for more information.
+ *
+ * For more information contact:
+ * Pulse-Eight Licensing       <license@pulse-eight.com>
+ *     http://www.pulse-eight.com/
+ *     http://www.pulse-eight.net/
+ */
+
+#include "env.h"
+#include <p8-platform/util/StringUtils.h>
+
+namespace CEC
+{
+  class CCECTypeUtils
+  {
+  public:
+    /*!
+     * @brief Get the device type for the given logical address.
+     * @param address The address to get the type for.
+     * @return The type, or CEC_DEVICE_TYPE_RESERVED if unknown.
+     */
+    static cec_device_type GetType(const cec_logical_address address)
+    {
+      switch (address)
+      {
+        case CECDEVICE_AUDIOSYSTEM:
+          return CEC_DEVICE_TYPE_AUDIO_SYSTEM;
+        case CECDEVICE_PLAYBACKDEVICE1:
+        case CECDEVICE_PLAYBACKDEVICE2:
+        case CECDEVICE_PLAYBACKDEVICE3:
+          return CEC_DEVICE_TYPE_PLAYBACK_DEVICE;
+        case CECDEVICE_RECORDINGDEVICE1:
+        case CECDEVICE_RECORDINGDEVICE2:
+        case CECDEVICE_RECORDINGDEVICE3:
+          return CEC_DEVICE_TYPE_RECORDING_DEVICE;
+        case CECDEVICE_TUNER1:
+        case CECDEVICE_TUNER2:
+        case CECDEVICE_TUNER3:
+        case CECDEVICE_TUNER4:
+          return CEC_DEVICE_TYPE_TUNER;
+        case CECDEVICE_TV:
+          return CEC_DEVICE_TYPE_TV;
+        default:
+          return CEC_DEVICE_TYPE_RESERVED;
+      }
+    }
+
+    /*!
+     * @brief Get the ackmask for all devices of the same type as the given logical address.
+     * @param address The address to get the ackmask for.
+     * @return The ackmask for this type.
+     */
+    static uint16_t GetMaskForType(cec_logical_address address)
+    {
+      return GetMaskForType(GetType(address));
+    }
+
+    /*!
+     * @brief Get the ackmask for all devices of the given type.
+     * @param type The type to get the ackmask for.
+     * @return The ackmask for this type, or 0 of no types match.
+     */
+    static uint16_t GetMaskForType(const cec_device_type type)
+    {
+      switch (type)
+      {
+        case CEC_DEVICE_TYPE_AUDIO_SYSTEM:
+        {
+          cec_logical_addresses addr;
+          addr.Clear();
+          addr.Set(CECDEVICE_AUDIOSYSTEM);
+          return addr.AckMask();
+        }
+        case CEC_DEVICE_TYPE_PLAYBACK_DEVICE:
+        {
+          cec_logical_addresses addr;
+          addr.Clear();
+          addr.Set(CECDEVICE_PLAYBACKDEVICE1);
+          addr.Set(CECDEVICE_PLAYBACKDEVICE2);
+          addr.Set(CECDEVICE_PLAYBACKDEVICE3);
+          return addr.AckMask();
+        }
+        case CEC_DEVICE_TYPE_RECORDING_DEVICE:
+        {
+          cec_logical_addresses addr;
+          addr.Clear();
+          addr.Set(CECDEVICE_RECORDINGDEVICE1);
+          addr.Set(CECDEVICE_RECORDINGDEVICE2);
+          addr.Set(CECDEVICE_RECORDINGDEVICE3);
+          return addr.AckMask();
+        }
+        case CEC_DEVICE_TYPE_TUNER:
+        {
+          cec_logical_addresses addr;
+          addr.Clear();
+          addr.Set(CECDEVICE_TUNER1);
+          addr.Set(CECDEVICE_TUNER2);
+          addr.Set(CECDEVICE_TUNER3);
+          addr.Set(CECDEVICE_TUNER4);
+          return addr.AckMask();
+        }
+        case CEC_DEVICE_TYPE_TV:
+        {
+          cec_logical_addresses addr;
+          addr.Clear();
+          addr.Set(CECDEVICE_TV);
+          return addr.AckMask();
+        }
+        default:
+          return 0;
+      }
+    }
+
+    static const char *ToString(const cec_device_type type)
+    {
+      switch (type)
+      {
+      case CEC_DEVICE_TYPE_AUDIO_SYSTEM:
+        return "audio system";
+      case CEC_DEVICE_TYPE_PLAYBACK_DEVICE:
+        return "playback device";
+      case CEC_DEVICE_TYPE_RECORDING_DEVICE:
+          return "recording device";
+      case CEC_DEVICE_TYPE_RESERVED:
+          return "reserved";
+      case CEC_DEVICE_TYPE_TUNER:
+          return "tuner";
+      case CEC_DEVICE_TYPE_TV:
+          return "TV";
+      default:
+        return "unknown";
+      }
+    }
+
+    static const char *ToString(const cec_menu_state state)
+    {
+      switch (state)
+      {
+      case CEC_MENU_STATE_ACTIVATED:
+        return "activated";
+      case CEC_MENU_STATE_DEACTIVATED:
+        return "deactivated";
+      default:
+        return "unknown";
+      }
+    }
+
+    static const char *ToString(const cec_version version)
+    {
+      switch (version)
+      {
+      case CEC_VERSION_1_2:
+        return "1.2";
+      case CEC_VERSION_1_2A:
+        return "1.2a";
+      case CEC_VERSION_1_3:
+        return "1.3";
+      case CEC_VERSION_1_3A:
+        return "1.3a";
+      case CEC_VERSION_1_4:
+        return "1.4";
+      default:
+        return "unknown";
+      }
+    }
+
+    static const char *ToString(const cec_power_status status)
+    {
+      switch (status)
+      {
+      case CEC_POWER_STATUS_ON:
+        return "on";
+      case CEC_POWER_STATUS_STANDBY:
+        return "standby";
+      case CEC_POWER_STATUS_IN_TRANSITION_ON_TO_STANDBY:
+        return "in transition from on to standby";
+      case CEC_POWER_STATUS_IN_TRANSITION_STANDBY_TO_ON:
+        return "in transition from standby to on";
+      default:
+        return "unknown";
+      }
+    }
+
+    static const char *ToString(const cec_logical_address address)
+    {
+      switch(address)
+      {
+      case CECDEVICE_AUDIOSYSTEM:
+        return "Audio";
+      case CECDEVICE_BROADCAST:
+        return "Broadcast";
+      case CECDEVICE_FREEUSE:
+        return "Free use";
+      case CECDEVICE_PLAYBACKDEVICE1:
+        return "Playback 1";
+      case CECDEVICE_PLAYBACKDEVICE2:
+        return "Playback 2";
+      case CECDEVICE_PLAYBACKDEVICE3:
+        return "Playback 3";
+      case CECDEVICE_RECORDINGDEVICE1:
+        return "Recorder 1";
+      case CECDEVICE_RECORDINGDEVICE2:
+        return "Recorder 2";
+      case CECDEVICE_RECORDINGDEVICE3:
+        return "Recorder 3";
+      case CECDEVICE_RESERVED1:
+        return "Reserved 1";
+      case CECDEVICE_RESERVED2:
+        return "Reserved 2";
+      case CECDEVICE_TUNER1:
+        return "Tuner 1";
+      case CECDEVICE_TUNER2:
+        return "Tuner 2";
+      case CECDEVICE_TUNER3:
+        return "Tuner 3";
+      case CECDEVICE_TUNER4:
+        return "Tuner 4";
+      case CECDEVICE_TV:
+        return "TV";
+      default:
+        return "unknown";
+      }
+    }
+
+    static const char *ToString(const cec_deck_control_mode mode)
+    {
+      switch (mode)
+      {
+      case CEC_DECK_CONTROL_MODE_SKIP_FORWARD_WIND:
+        return "skip forward wind";
+      case CEC_DECK_CONTROL_MODE_EJECT:
+        return "eject";
+      case CEC_DECK_CONTROL_MODE_SKIP_REVERSE_REWIND:
+        return "reverse rewind";
+      case CEC_DECK_CONTROL_MODE_STOP:
+        return "stop";
+      default:
+        return "unknown";
+      }
+    }
+
+    static const char *ToString(const cec_deck_info status)
+    {
+      switch (status)
+      {
+      case CEC_DECK_INFO_PLAY:
+        return "play";
+      case CEC_DECK_INFO_RECORD:
+        return "record";
+      case CEC_DECK_INFO_PLAY_REVERSE:
+        return "play reverse";
+      case CEC_DECK_INFO_STILL:
+        return "still";
+      case CEC_DECK_INFO_SLOW:
+        return "slow";
+      case CEC_DECK_INFO_SLOW_REVERSE:
+        return "slow reverse";
+      case CEC_DECK_INFO_FAST_FORWARD:
+        return "fast forward";
+      case CEC_DECK_INFO_FAST_REVERSE:
+        return "fast reverse";
+      case CEC_DECK_INFO_NO_MEDIA:
+        return "no media";
+      case CEC_DECK_INFO_STOP:
+        return "stop";
+      case CEC_DECK_INFO_SKIP_FORWARD_WIND:
+        return "info skip forward wind";
+      case CEC_DECK_INFO_SKIP_REVERSE_REWIND:
+        return "info skip reverse rewind";
+      case CEC_DECK_INFO_INDEX_SEARCH_FORWARD:
+        return "info index search forward";
+      case CEC_DECK_INFO_INDEX_SEARCH_REVERSE:
+        return "info index search reverse";
+      case CEC_DECK_INFO_OTHER_STATUS:
+        return "other";
+      case CEC_DECK_INFO_OTHER_STATUS_LG:
+        return "LG other";
+      default:
+        return "unknown";
+      }
+    }
+
+    static const char *ToString(const cec_opcode opcode)
+    {
+      switch (opcode)
+      {
+      case CEC_OPCODE_ACTIVE_SOURCE:
+        return "active source";
+      case CEC_OPCODE_IMAGE_VIEW_ON:
+        return "image view on";
+      case CEC_OPCODE_TEXT_VIEW_ON:
+        return "text view on";
+      case CEC_OPCODE_INACTIVE_SOURCE:
+        return "inactive source";
+      case CEC_OPCODE_REQUEST_ACTIVE_SOURCE:
+        return "request active source";
+      case CEC_OPCODE_ROUTING_CHANGE:
+        return "routing change";
+      case CEC_OPCODE_ROUTING_INFORMATION:
+        return "routing information";
+      case CEC_OPCODE_SET_STREAM_PATH:
+        return "set stream path";
+      case CEC_OPCODE_STANDBY:
+        return "standby";
+      case CEC_OPCODE_RECORD_OFF:
+        return "record off";
+      case CEC_OPCODE_RECORD_ON:
+        return "record on";
+      case CEC_OPCODE_RECORD_STATUS:
+        return "record status";
+      case CEC_OPCODE_RECORD_TV_SCREEN:
+        return "record tv screen";
+      case CEC_OPCODE_CLEAR_ANALOGUE_TIMER:
+        return "clear analogue timer";
+      case CEC_OPCODE_CLEAR_DIGITAL_TIMER:
+        return "clear digital timer";
+      case CEC_OPCODE_CLEAR_EXTERNAL_TIMER:
+        return "clear external timer";
+      case CEC_OPCODE_SET_ANALOGUE_TIMER:
+        return "set analogue timer";
+      case CEC_OPCODE_SET_DIGITAL_TIMER:
+        return "set digital timer";
+      case CEC_OPCODE_SET_EXTERNAL_TIMER:
+        return "set external timer";
+      case CEC_OPCODE_SET_TIMER_PROGRAM_TITLE:
+        return "set timer program title";
+      case CEC_OPCODE_TIMER_CLEARED_STATUS:
+        return "timer cleared status";
+      case CEC_OPCODE_TIMER_STATUS:
+        return "timer status";
+      case CEC_OPCODE_CEC_VERSION:
+        return "cec version";
+      case CEC_OPCODE_GET_CEC_VERSION:
+        return "get cec version";
+      case CEC_OPCODE_GIVE_PHYSICAL_ADDRESS:
+        return "give physical address";
+      case CEC_OPCODE_GET_MENU_LANGUAGE:
+        return "get menu language";
+      case CEC_OPCODE_REPORT_PHYSICAL_ADDRESS:
+        return "report physical address";
+      case CEC_OPCODE_SET_MENU_LANGUAGE:
+        return "set menu language";
+      case CEC_OPCODE_DECK_CONTROL:
+        return "deck control";
+      case CEC_OPCODE_DECK_STATUS:
+        return "deck status";
+      case CEC_OPCODE_GIVE_DECK_STATUS:
+        return "give deck status";
+      case CEC_OPCODE_PLAY:
+        return "play";
+      case CEC_OPCODE_GIVE_TUNER_DEVICE_STATUS:
+        return "give tuner status";
+      case CEC_OPCODE_SELECT_ANALOGUE_SERVICE:
+        return "select analogue service";
+      case CEC_OPCODE_SELECT_DIGITAL_SERVICE:
+        return "set digital service";
+      case CEC_OPCODE_TUNER_DEVICE_STATUS:
+        return "tuner device status";
+      case CEC_OPCODE_TUNER_STEP_DECREMENT:
+        return "tuner step decrement";
+      case CEC_OPCODE_TUNER_STEP_INCREMENT:
+        return "tuner step increment";
+      case CEC_OPCODE_DEVICE_VENDOR_ID:
+        return "device vendor id";
+      case CEC_OPCODE_GIVE_DEVICE_VENDOR_ID:
+        return "give device vendor id";
+      case CEC_OPCODE_VENDOR_COMMAND:
+        return "vendor command";
+      case CEC_OPCODE_VENDOR_COMMAND_WITH_ID:
+        return "vendor command with id";
+      case CEC_OPCODE_VENDOR_REMOTE_BUTTON_DOWN:
+        return "vendor remote button down";
+      case CEC_OPCODE_VENDOR_REMOTE_BUTTON_UP:
+        return "vendor remote button up";
+      case CEC_OPCODE_SET_OSD_STRING:
+        return "set osd string";
+      case CEC_OPCODE_GIVE_OSD_NAME:
+        return "give osd name";
+      case CEC_OPCODE_SET_OSD_NAME:
+        return "set osd name";
+      case CEC_OPCODE_MENU_REQUEST:
+        return "menu request";
+      case CEC_OPCODE_MENU_STATUS:
+        return "menu status";
+      case CEC_OPCODE_USER_CONTROL_PRESSED:
+        return "user control pressed";
+      case CEC_OPCODE_USER_CONTROL_RELEASE:
+        return "user control release";
+      case CEC_OPCODE_GIVE_DEVICE_POWER_STATUS:
+        return "give device power status";
+      case CEC_OPCODE_REPORT_POWER_STATUS:
+        return "report power status";
+      case CEC_OPCODE_FEATURE_ABORT:
+        return "feature abort";
+      case CEC_OPCODE_ABORT:
+        return "abort";
+      case CEC_OPCODE_GIVE_AUDIO_STATUS:
+        return "give audio status";
+      case CEC_OPCODE_GIVE_SYSTEM_AUDIO_MODE_STATUS:
+        return "give audio mode status";
+      case CEC_OPCODE_REPORT_AUDIO_STATUS:
+        return "report audio status";
+      case CEC_OPCODE_SET_SYSTEM_AUDIO_MODE:
+        return "set system audio mode";
+      case CEC_OPCODE_SYSTEM_AUDIO_MODE_REQUEST:
+        return "system audio mode request";
+      case CEC_OPCODE_SYSTEM_AUDIO_MODE_STATUS:
+        return "system audio mode status";
+      case CEC_OPCODE_SET_AUDIO_RATE:
+        return "set audio rate";
+      case CEC_OPCODE_START_ARC:
+        return "start ARC";
+      case CEC_OPCODE_REPORT_ARC_STARTED:
+        return "report ARC started";
+      case CEC_OPCODE_REPORT_ARC_ENDED:
+        return "report ARC ended";
+      case CEC_OPCODE_REQUEST_ARC_START:
+        return "request ARC start";
+      case CEC_OPCODE_REQUEST_ARC_END:
+        return "request ARC end";
+      case CEC_OPCODE_END_ARC:
+        return "end ARC";
+      case CEC_OPCODE_CDC:
+        return "CDC";
+      case CEC_OPCODE_NONE:
+        return "poll";
+      default:
+        return "UNKNOWN";
+      }
+    }
+
+    static const char *ToString(const cec_system_audio_status mode)
+    {
+      switch(mode)
+      {
+      case CEC_SYSTEM_AUDIO_STATUS_ON:
+        return "on";
+      case CEC_SYSTEM_AUDIO_STATUS_OFF:
+        return "off";
+      default:
+        return "unknown";
+      }
+    }
+
+    static const char *ToString(const cec_audio_status UNUSED(status))
+    {
+      // TODO this is a mask
+      return "TODO";
+    }
+
+    static const char *ToString(const cec_vendor_id vendor)
+    {
+      switch (vendor)
+      {
+      case CEC_VENDOR_SAMSUNG:
+        return "Samsung";
+      case CEC_VENDOR_LG:
+        return "LG";
+      case CEC_VENDOR_PANASONIC:
+        return "Panasonic";
+      case CEC_VENDOR_PIONEER:
+        return "Pioneer";
+      case CEC_VENDOR_ONKYO:
+        return "Onkyo";
+      case CEC_VENDOR_YAMAHA:
+        return "Yamaha";
+      case CEC_VENDOR_PHILIPS:
+        return "Philips";
+      case CEC_VENDOR_SONY:
+        return "Sony";
+      case CEC_VENDOR_TOSHIBA:
+      case CEC_VENDOR_TOSHIBA2:
+        return "Toshiba";
+      case CEC_VENDOR_AKAI:
+        return "Akai";
+      case CEC_VENDOR_AOC:
+        return "AOC";
+      case CEC_VENDOR_BENQ:
+        return "Benq";
+      case CEC_VENDOR_DAEWOO:
+        return "Daewoo";
+      case CEC_VENDOR_GRUNDIG:
+        return "Grundig";
+      case CEC_VENDOR_MEDION:
+        return "Medion";
+      case CEC_VENDOR_SHARP:
+      case CEC_VENDOR_SHARP2:
+        return "Sharp";
+      case CEC_VENDOR_VIZIO:
+        return "Vizio";
+      case CEC_VENDOR_BROADCOM:
+        return "Broadcom";
+      case CEC_VENDOR_LOEWE:
+        return "Loewe";
+      case CEC_VENDOR_DENON:
+        return "Denon";
+      case CEC_VENDOR_MARANTZ:
+        return "Marantz";
+      case CEC_VENDOR_HARMAN_KARDON:
+      case CEC_VENDOR_HARMAN_KARDON2:
+        return "Harman/Kardon";
+      case CEC_VENDOR_PULSE_EIGHT:
+        return "Pulse Eight";
+      case CEC_VENDOR_GOOGLE:
+        return "Google";
+      default:
+        return "Unknown";
+      }
+    }
+
+    static std::string VersionToString(uint32_t version)
+    {
+      uint32_t major, minor, patch;
+      if (version <= 0x2200)
+      {
+        major = LIBCEC_UINT_TO_VERSION_MAJOR_OLD(version);
+        minor = LIBCEC_UINT_TO_VERSION_MINOR_OLD(version);
+        patch = LIBCEC_UINT_TO_VERSION_PATCH_OLD(version);
+      }
+      else
+      {
+        major = LIBCEC_UINT_TO_VERSION_MAJOR(version);
+        minor = LIBCEC_UINT_TO_VERSION_MINOR(version);
+        patch = LIBCEC_UINT_TO_VERSION_PATCH(version);
+      }
+      return StringUtils::Format("%u.%u.%u", major, minor, patch);
+    }
+
+    static const char *ToString(const cec_abort_reason reason)
+    {
+      switch(reason)
+      {
+      case CEC_ABORT_REASON_UNRECOGNIZED_OPCODE:
+        return "unrecognised opcode";
+      case CEC_ABORT_REASON_NOT_IN_CORRECT_MODE_TO_RESPOND:
+        return "not in correct mode to respond";
+      case CEC_ABORT_REASON_CANNOT_PROVIDE_SOURCE:
+        return "cannot provide source";
+      case CEC_ABORT_REASON_INVALID_OPERAND:
+        return "invalid operand";
+      case CEC_ABORT_REASON_REFUSED:
+        return "refused";
+      default:
+        return "unknown";
+      }
+    }
+
+    static const char *ToString(const cec_user_control_code key)
+    {
+      switch (key)
+      {
+      case CEC_USER_CONTROL_CODE_SELECT:
+        return "select";
+      case CEC_USER_CONTROL_CODE_UP:
+        return "up";
+      case CEC_USER_CONTROL_CODE_DOWN:
+          return "down";
+      case CEC_USER_CONTROL_CODE_LEFT:
+        return "left";
+      case CEC_USER_CONTROL_CODE_RIGHT:
+        return "right";
+      case CEC_USER_CONTROL_CODE_RIGHT_UP:
+        return "right+up";
+      case CEC_USER_CONTROL_CODE_RIGHT_DOWN:
+        return "right+down";
+      case CEC_USER_CONTROL_CODE_LEFT_UP:
+        return "left+up";
+      case CEC_USER_CONTROL_CODE_LEFT_DOWN:
+        return "left+down";
+      case CEC_USER_CONTROL_CODE_ROOT_MENU:
+        return "root menu";
+      case CEC_USER_CONTROL_CODE_SETUP_MENU:
+        return "setup menu";
+      case CEC_USER_CONTROL_CODE_CONTENTS_MENU:
+        return "contents menu";
+      case CEC_USER_CONTROL_CODE_FAVORITE_MENU:
+        return "favourite menu";
+      case CEC_USER_CONTROL_CODE_EXIT:
+        return "exit";
+      case CEC_USER_CONTROL_CODE_TOP_MENU:
+        return "top menu";
+      case CEC_USER_CONTROL_CODE_DVD_MENU:
+        return "dvd menu";
+      case CEC_USER_CONTROL_CODE_NUMBER_ENTRY_MODE:
+        return "number entry mode";
+      case CEC_USER_CONTROL_CODE_NUMBER11:
+        return "11";
+      case CEC_USER_CONTROL_CODE_NUMBER12:
+        return "12";
+      case CEC_USER_CONTROL_CODE_NUMBER0:
+        return "0";
+      case CEC_USER_CONTROL_CODE_NUMBER1:
+        return "1";
+      case CEC_USER_CONTROL_CODE_NUMBER2:
+        return "2";
+      case CEC_USER_CONTROL_CODE_NUMBER3:
+        return "3";
+      case CEC_USER_CONTROL_CODE_NUMBER4:
+        return "4";
+      case CEC_USER_CONTROL_CODE_NUMBER5:
+        return "5";
+      case CEC_USER_CONTROL_CODE_NUMBER6:
+        return "6";
+      case CEC_USER_CONTROL_CODE_NUMBER7:
+        return "7";
+      case CEC_USER_CONTROL_CODE_NUMBER8:
+        return "8";
+      case CEC_USER_CONTROL_CODE_NUMBER9:
+        return "9";
+      case CEC_USER_CONTROL_CODE_DOT:
+        return ".";
+      case CEC_USER_CONTROL_CODE_ENTER:
+        return "enter";
+      case CEC_USER_CONTROL_CODE_CLEAR:
+        return "clear";
+      case CEC_USER_CONTROL_CODE_NEXT_FAVORITE:
+        return "next favourite";
+      case CEC_USER_CONTROL_CODE_CHANNEL_UP:
+        return "channel up";
+      case CEC_USER_CONTROL_CODE_CHANNEL_DOWN:
+        return "channel down";
+      case CEC_USER_CONTROL_CODE_PREVIOUS_CHANNEL:
+        return "previous channel";
+      case CEC_USER_CONTROL_CODE_SOUND_SELECT:
+        return "sound select";
+      case CEC_USER_CONTROL_CODE_INPUT_SELECT:
+        return "input select";
+      case CEC_USER_CONTROL_CODE_DISPLAY_INFORMATION:
+        return "display information";
+      case CEC_USER_CONTROL_CODE_HELP:
+        return "help";
+      case CEC_USER_CONTROL_CODE_PAGE_UP:
+        return "page up";
+      case CEC_USER_CONTROL_CODE_PAGE_DOWN:
+        return "page down";
+      case CEC_USER_CONTROL_CODE_POWER:
+        return "power";
+      case CEC_USER_CONTROL_CODE_VOLUME_UP:
+        return "volume up";
+      case CEC_USER_CONTROL_CODE_VOLUME_DOWN:
+        return "volume down";
+      case CEC_USER_CONTROL_CODE_MUTE:
+        return "mute";
+      case CEC_USER_CONTROL_CODE_PLAY:
+        return "play";
+      case CEC_USER_CONTROL_CODE_STOP:
+        return "stop";
+      case CEC_USER_CONTROL_CODE_PAUSE:
+        return "pause";
+      case CEC_USER_CONTROL_CODE_RECORD:
+        return "record";
+      case CEC_USER_CONTROL_CODE_REWIND:
+        return "rewind";
+      case CEC_USER_CONTROL_CODE_FAST_FORWARD:
+        return "Fast forward";
+      case CEC_USER_CONTROL_CODE_EJECT:
+        return "eject";
+      case CEC_USER_CONTROL_CODE_FORWARD:
+        return "forward";
+      case CEC_USER_CONTROL_CODE_BACKWARD:
+        return "backward";
+      case CEC_USER_CONTROL_CODE_STOP_RECORD:
+        return "stop record";
+      case CEC_USER_CONTROL_CODE_PAUSE_RECORD:
+        return "pause record";
+      case CEC_USER_CONTROL_CODE_ANGLE:
+        return "angle";
+      case CEC_USER_CONTROL_CODE_SUB_PICTURE:
+        return "sub picture";
+      case CEC_USER_CONTROL_CODE_VIDEO_ON_DEMAND:
+        return "video on demand";
+      case CEC_USER_CONTROL_CODE_ELECTRONIC_PROGRAM_GUIDE:
+        return "electronic program guide";
+      case CEC_USER_CONTROL_CODE_TIMER_PROGRAMMING:
+        return "timer programming";
+      case CEC_USER_CONTROL_CODE_INITIAL_CONFIGURATION:
+        return "initial configuration";
+      case CEC_USER_CONTROL_CODE_SELECT_BROADCAST_TYPE:
+        return "select broadcast type";
+      case CEC_USER_CONTROL_CODE_SELECT_SOUND_PRESENTATION:
+        return "select sound presentation";
+      case CEC_USER_CONTROL_CODE_PLAY_FUNCTION:
+        return "play (function)";
+      case CEC_USER_CONTROL_CODE_PAUSE_PLAY_FUNCTION:
+        return "pause play (function)";
+      case CEC_USER_CONTROL_CODE_RECORD_FUNCTION:
+        return "record (function)";
+      case CEC_USER_CONTROL_CODE_PAUSE_RECORD_FUNCTION:
+        return "pause record (function)";
+      case CEC_USER_CONTROL_CODE_STOP_FUNCTION:
+        return "stop (function)";
+      case CEC_USER_CONTROL_CODE_MUTE_FUNCTION:
+        return "mute (function)";
+      case CEC_USER_CONTROL_CODE_RESTORE_VOLUME_FUNCTION:
+        return "restore volume";
+      case CEC_USER_CONTROL_CODE_TUNE_FUNCTION:
+        return "tune";
+      case CEC_USER_CONTROL_CODE_SELECT_MEDIA_FUNCTION:
+        return "select media";
+      case CEC_USER_CONTROL_CODE_SELECT_AV_INPUT_FUNCTION:
+        return "select AV input";
+      case CEC_USER_CONTROL_CODE_SELECT_AUDIO_INPUT_FUNCTION:
+        return "select audio input";
+      case CEC_USER_CONTROL_CODE_POWER_TOGGLE_FUNCTION:
+        return "power toggle";
+      case CEC_USER_CONTROL_CODE_POWER_OFF_FUNCTION:
+        return "power off";
+      case CEC_USER_CONTROL_CODE_POWER_ON_FUNCTION:
+        return "power on";
+      case CEC_USER_CONTROL_CODE_F1_BLUE:
+        return "F1 (blue)";
+      case CEC_USER_CONTROL_CODE_F2_RED:
+        return "F2 (red)";
+      case CEC_USER_CONTROL_CODE_F3_GREEN:
+        return "F3 (green)";
+      case CEC_USER_CONTROL_CODE_F4_YELLOW:
+        return "F4 (yellow)";
+      case CEC_USER_CONTROL_CODE_F5:
+        return "F5";
+      case CEC_USER_CONTROL_CODE_DATA:
+        return "data";
+      case CEC_USER_CONTROL_CODE_AN_RETURN:
+        return "return (Samsung)";
+      case CEC_USER_CONTROL_CODE_AN_CHANNELS_LIST:
+        return "channels list (Samsung)";
+      default:
+        return "unknown";
+      }
+    }
+
+    static const char *ToString(const cec_adapter_type type)
+    {
+      switch (type)
+      {
+      case ADAPTERTYPE_P8_EXTERNAL:
+        return "Pulse-Eight USB-CEC Adapter";
+      case ADAPTERTYPE_P8_DAUGHTERBOARD:
+        return "Pulse-Eight USB-CEC Daughterboard";
+      case ADAPTERTYPE_RPI:
+        return "Raspberry Pi";
+      case ADAPTERTYPE_TDA995x:
+        return "TDA995x";
+      default:
+        return "unknown";
+      }
+    }
+
+    static bool PhysicalAddressIsIncluded(uint16_t iParent, uint16_t iChild)
+    {
+      for (int iPtr = 3; iPtr >= 0; iPtr--)
+      {
+        if (((iParent >> 4*iPtr) & 0xF) > 0 &&
+            ((iParent >> 4*iPtr) & 0xF) != ((iChild >> 4*iPtr) & 0xF))
+          return false;
+      }
+      return true;
+    }
+
+    static std::string ToString(const cec_command& command)
+    {
+      std::string dataStr;
+      dataStr = StringUtils::Format(">> %1x%1x", command.initiator, command.destination);
+      if (command.opcode_set == 1)
+        dataStr += StringUtils::Format(":%02x", command.opcode);
+      for (uint8_t iPtr = 0; iPtr < command.parameters.size; iPtr++)
+        dataStr += StringUtils::Format(":%02x", (unsigned int)command.parameters[iPtr]);
+      return dataStr;
+    }
+  };
+}
diff --git a/src/libcec/adapter/AdapterFactory.cpp b/src/libcec/adapter/AdapterFactory.cpp
index da05725..92e378b 100644
--- a/src/libcec/adapter/AdapterFactory.cpp
+++ b/src/libcec/adapter/AdapterFactory.cpp
@@ -58,6 +58,11 @@
 #include "Exynos/ExynosCECAdapterCommunication.h"
 #endif
 
+#if defined(HAVE_IMX_API)
+#include "IMX/IMXCECAdapterDetection.h"
+#include "IMX/IMXCECAdapterCommunication.h"
+#endif
+
 using namespace CEC;
 
 int8_t CAdapterFactory::FindAdapters(cec_adapter *deviceList, uint8_t iBufSize, const char *strDevicePath /* = NULL */)
@@ -127,7 +132,22 @@ int8_t CAdapterFactory::DetectAdapters(cec_adapter_descriptor *deviceList, uint8
 #endif
 
 
-#if !defined(HAVE_RPI_API) && !defined(HAVE_P8_USB) && !defined(HAVE_TDA995X_API)
+
+#if defined(HAVE_IMX_API)
+  if (iAdaptersFound < iBufSize && CIMXCECAdapterDetection::FindAdapter() &&
+      (!strDevicePath || !strcmp(strDevicePath, CEC_IMX_VIRTUAL_COM)))
+  {
+    snprintf(deviceList[iAdaptersFound].strComPath, sizeof(deviceList[iAdaptersFound].strComPath), CEC_IMX_PATH);
+    snprintf(deviceList[iAdaptersFound].strComName, sizeof(deviceList[iAdaptersFound].strComName), CEC_IMX_VIRTUAL_COM);
+    deviceList[iAdaptersFound].iVendorId = IMX_ADAPTER_VID;
+    deviceList[iAdaptersFound].iProductId = IMX_ADAPTER_PID;
+    deviceList[iAdaptersFound].adapterType = ADAPTERTYPE_IMX;
+    iAdaptersFound++;
+  }
+#endif
+
+
+#if !defined(HAVE_RPI_API) && !defined(HAVE_P8_USB) && !defined(HAVE_TDA995X_API) && !defined(HAVE_IMX_API)
 #error "libCEC doesn't have support for any type of adapter. please check your build system or configuration"
 #endif
 
@@ -151,11 +171,16 @@ IAdapterCommunication *CAdapterFactory::GetInstance(const char *strPort, uint16_
     return new CRPiCECAdapterCommunication(m_lib->m_cec);
 #endif
 
+#if defined(HAVE_IMX_API)
+  if (!strcmp(strPort, CEC_IMX_VIRTUAL_COM))
+    return new CIMXCECAdapterCommunication(m_lib->m_cec);
+#endif
+
 #if defined(HAVE_P8_USB)
   return new CUSBCECAdapterCommunication(m_lib->m_cec, strPort, iBaudRate);
 #endif
 
-#if !defined(HAVE_RPI_API) && !defined(HAVE_P8_USB) && !defined(HAVE_TDA995X_API) && !defined(HAVE_EXYNOS_API)
+#if !defined(HAVE_RPI_API) && !defined(HAVE_P8_USB) && !defined(HAVE_TDA995X_API) && !defined(HAVE_EXYNOS_API) && !defined(HAVE_IMX_API)
   return NULL;
 #endif
 }
diff --git a/src/libcec/adapter/IMX/AdapterMessageQueue.h b/src/libcec/adapter/IMX/AdapterMessageQueue.h
new file mode 100644
index 0000000..af6742c
--- /dev/null
+++ b/src/libcec/adapter/IMX/AdapterMessageQueue.h
@@ -0,0 +1,134 @@
+#pragma once
+/*
+ * This file is part of the libCEC(R) library.
+ *
+ * libCEC(R) is Copyright (C) 2011-2013 Pulse-Eight Limited.  All rights reserved.
+ * libCEC(R) is an original work, containing original code.
+ *
+ * libCEC(R) is a trademark of Pulse-Eight Limited.
+ *
+ * This program is dual-licensed; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ *
+ * Alternatively, you can license this library under a commercial license,
+ * please contact Pulse-Eight Licensing for more information.
+ *
+ * For more information contact:
+ * Pulse-Eight Licensing       <license@pulse-eight.com>
+ *     http://www.pulse-eight.com/
+ *     http://www.pulse-eight.net/
+ */
+
+#include "platform/threads/mutex.h"
+
+namespace CEC
+{
+  using namespace PLATFORM;
+  
+  class CAdapterMessageQueueEntry
+  {
+  public:
+    CAdapterMessageQueueEntry(const cec_command &command)
+       : m_bWaiting(true), m_retval((uint32_t)-1), m_bSucceeded(false)
+    {
+      m_hash = hashValue(
+    	uint32_t(command.opcode_set ? command.opcode : CEC_OPCODE_NONE),
+        command.initiator, command.destination);
+    }
+    
+    virtual ~CAdapterMessageQueueEntry(void) {}
+
+    /*!
+     * @brief Query result from worker thread
+     */
+    uint32_t Result() const
+    {
+      return m_retval;
+    }
+    
+    /*!
+     * @brief Signal waiting threads
+     */
+    void Broadcast(void)
+    {
+      CLockObject lock(m_mutex);
+      m_condition.Broadcast();
+    }
+
+    /*!
+     * @brief Signal waiting thread(s) when message matches this entry
+     */
+    bool CheckMatch(uint32_t opcode, cec_logical_address initiator, 
+                    cec_logical_address destination, uint32_t response)
+    {
+      uint32_t hash = hashValue(opcode, initiator, destination);
+      
+      if (hash == m_hash)
+      {
+        CLockObject lock(m_mutex);
+
+        m_retval = response;
+        m_bSucceeded = true;
+        m_condition.Signal();
+        return true;
+      }
+      
+      return false;
+    }
+
+    /*!
+     * @brief Wait for a response to this command.
+     * @param iTimeout The timeout to use while waiting.
+     * @return True when a response was received before the timeout passed, false otherwise.
+     */
+    bool Wait(uint32_t iTimeout)
+    {
+      CLockObject lock(m_mutex);
+      
+      bool bReturn = m_bSucceeded ? true : m_condition.Wait(m_mutex, m_bSucceeded, iTimeout);
+      m_bWaiting = false;
+      return bReturn;
+    }
+
+    /*!
+     * @return True while a thread is waiting for a signal or isn't waiting yet, false otherwise.
+     */
+    bool IsWaiting(void)
+    {
+      CLockObject lock(m_mutex);
+      return m_bWaiting;
+    }
+
+    /*!
+     * @return Hash value for given cec_command
+     */
+    static uint32_t hashValue(uint32_t opcode, 
+                              cec_logical_address initiator,  
+                              cec_logical_address destination)
+    {
+      return 1 | ((uint32_t)initiator << 8) | 
+             ((uint32_t)destination << 16) | ((uint32_t)opcode << 16);
+    }
+    
+  private:    
+    bool                         m_bWaiting;     /**< true while a thread is waiting or when it hasn't started waiting yet */
+    PLATFORM::CCondition<bool>   m_condition;    /**< the condition to wait on */
+    PLATFORM::CMutex             m_mutex;        /**< mutex for changes to this class */
+    uint32_t                  	 m_hash;
+    uint32_t                     m_retval;
+    bool                         m_bSucceeded;
+  };
+ 
+};
diff --git a/src/libcec/adapter/IMX/IMXCECAdapterCommunication.cpp b/src/libcec/adapter/IMX/IMXCECAdapterCommunication.cpp
new file mode 100644
index 0000000..2daa8cb
--- /dev/null
+++ b/src/libcec/adapter/IMX/IMXCECAdapterCommunication.cpp
@@ -0,0 +1,328 @@
+/*
+ * This file is part of the libCEC(R) library.
+ *
+ * libCEC(R) is Copyright (C) 2011-2013 Pulse-Eight Limited.  All rights reserved.
+ * libCEC(R) is an original work, containing original code.
+ *
+ * libCEC(R) is a trademark of Pulse-Eight Limited.
+ * 
+ * IMX adpater port is Copyright (C) 2013 by Stephan Rafin
+ * 
+ * You can redistribute this file and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ *
+ */
+
+#include "env.h"
+
+#if defined(HAVE_IMX_API)
+#include "IMXCECAdapterCommunication.h"
+
+#include "CECTypeUtils.h"
+#include "LibCEC.h"
+#include "platform/sockets/cdevsocket.h"
+#include "platform/util/StdString.h"
+#include "platform/util/buffer.h"
+
+/*
+ * Ioctl definitions from kernel header
+ */
+#define HDMICEC_IOC_MAGIC  'H'
+#define HDMICEC_IOC_SETLOGICALADDRESS _IOW(HDMICEC_IOC_MAGIC,  1, unsigned char)
+#define HDMICEC_IOC_STARTDEVICE _IO(HDMICEC_IOC_MAGIC,  2)
+#define HDMICEC_IOC_STOPDEVICE  _IO(HDMICEC_IOC_MAGIC,  3)
+#define HDMICEC_IOC_GETPHYADDRESS _IOR(HDMICEC_IOC_MAGIC,  4, unsigned char[4])
+
+#define MAX_CEC_MESSAGE_LEN 17
+
+#define MESSAGE_TYPE_RECEIVE_SUCCESS 1
+#define MESSAGE_TYPE_NOACK 2
+#define MESSAGE_TYPE_DISCONNECTED 3
+#define MESSAGE_TYPE_CONNECTED 4
+#define MESSAGE_TYPE_SEND_SUCCESS 5
+
+typedef struct hdmi_cec_event{
+  int event_type;
+  int msg_len;
+  unsigned char msg[MAX_CEC_MESSAGE_LEN];
+}hdmi_cec_event;
+
+
+using namespace std;
+using namespace CEC;
+using namespace PLATFORM;
+
+#include "AdapterMessageQueue.h"
+
+#define LIB_CEC m_callback->GetLib()
+
+// these are defined in nxp private header file
+#define CEC_MSG_SUCCESS                 0x00	/*Message transmisson Succeed*/
+#define CEC_CSP_OFF_STATE               0x80	/*CSP in Off State*/
+#define CEC_BAD_REQ_SERVICE             0x81	/*Bad .req service*/
+#define CEC_MSG_FAIL_UNABLE_TO_ACCESS	0x82	/*Message transmisson failed: Unable to access CEC line*/
+#define CEC_MSG_FAIL_ARBITRATION_ERROR	0x83	/*Message transmisson failed: Arbitration error*/
+#define CEC_MSG_FAIL_BIT_TIMMING_ERROR	0x84	/*Message transmisson failed: Bit timming error*/
+#define CEC_MSG_FAIL_DEST_NOT_ACK       0x85	/*Message transmisson failed: Destination Address not aknowledged*/
+#define CEC_MSG_FAIL_DATA_NOT_ACK       0x86	/*Message transmisson failed: Databyte not acknowledged*/
+
+
+CIMXCECAdapterCommunication::CIMXCECAdapterCommunication(IAdapterCommunicationCallback *callback) :
+    IAdapterCommunication(callback)/*,
+    m_bLogicalAddressChanged(false)*/
+{ 
+  CLockObject lock(m_mutex);
+
+  m_iNextMessage = 0;
+  //m_logicalAddresses.Clear();
+  m_logicalAddress = CECDEVICE_UNKNOWN;
+  m_bLogicalAddressRegistered = false;
+  m_bInitialised = false;
+  m_dev = new CCDevSocket(CEC_IMX_PATH);
+}
+
+CIMXCECAdapterCommunication::~CIMXCECAdapterCommunication(void)
+{
+  Close();
+
+  CLockObject lock(m_mutex);
+  delete m_dev;
+  m_dev = 0;
+}
+
+bool CIMXCECAdapterCommunication::IsOpen(void)
+{
+  return IsInitialised() && m_dev->IsOpen();
+}
+
+bool CIMXCECAdapterCommunication::Open(uint32_t iTimeoutMs, bool UNUSED(bSkipChecks), bool bStartListening)
+{
+  if (m_dev->Open(iTimeoutMs))
+  {
+    if (!bStartListening || CreateThread()) {
+      if (m_dev->Ioctl(HDMICEC_IOC_STARTDEVICE, NULL) == 0) {
+         m_bInitialised = true;
+         return true;
+      }
+      LIB_CEC->AddLog(CEC_LOG_ERROR, "%s: Unable to start device\n", __func__);
+    }
+    m_dev->Close();
+  }
+
+  return false;
+}
+
+
+void CIMXCECAdapterCommunication::Close(void)
+{
+  StopThread(0);
+
+  CLockObject lock(m_mutex);
+  if (!m_bInitialised) {
+    return;
+  }
+  if (m_dev->Ioctl(HDMICEC_IOC_STOPDEVICE, NULL) != 0) {
+    LIB_CEC->AddLog(CEC_LOG_ERROR, "%s: Unable to stop device\n", __func__);
+  }
+  m_dev->Close();
+  m_bInitialised = false;
+}
+
+
+std::string CIMXCECAdapterCommunication::GetError(void) const
+{
+  std::string strError(m_strError);
+  return strError;
+}
+
+
+cec_adapter_message_state CIMXCECAdapterCommunication::Write(
+  const cec_command &data, bool &UNUSED(bRetry), uint8_t UNUSED(iLineTimeout), bool UNUSED(bIsReply))
+{
+  //cec_frame frame;
+  unsigned char message[MAX_CEC_MESSAGE_LEN];
+  int msg_len = 1;
+  cec_adapter_message_state rc = ADAPTER_MESSAGE_STATE_ERROR;
+
+  if ((size_t)data.parameters.size + data.opcode_set + 1 > sizeof(message))
+  {
+    LIB_CEC->AddLog(CEC_LOG_ERROR, "%s: data size too large !", __func__);
+    return ADAPTER_MESSAGE_STATE_ERROR;
+  }
+
+  message[0] = (data.initiator << 4) | (data.destination & 0x0f);
+  if (data.opcode_set)
+  {
+    message[1] = data.opcode;
+    msg_len++;
+    memcpy(&message[2], data.parameters.data, data.parameters.size);
+    msg_len+=data.parameters.size;
+  }
+
+  if (m_dev->Write(message, msg_len) == msg_len)
+  {
+    rc = ADAPTER_MESSAGE_STATE_SENT_ACKED;
+  }
+    else
+      LIB_CEC->AddLog(CEC_LOG_ERROR, "%s: sent command error !", __func__);
+
+  return rc;
+}
+
+
+uint16_t CIMXCECAdapterCommunication::GetFirmwareVersion(void)
+{
+  /* FIXME add ioctl ? */
+  return 0;
+}
+
+
+cec_vendor_id CIMXCECAdapterCommunication::GetVendorId(void)
+{
+  return CEC_VENDOR_UNKNOWN;
+}
+
+
+uint16_t CIMXCECAdapterCommunication::GetPhysicalAddress(void)
+{
+  uint32_t info;
+  uint16_t phy_addr;
+
+  if (m_dev->Ioctl(HDMICEC_IOC_GETPHYADDRESS, &info) != 0)
+  {
+    LIB_CEC->AddLog(CEC_LOG_ERROR, "%s: HDMICEC_IOC_GETPHYADDRESS failed !", __func__);
+    return CEC_INVALID_PHYSICAL_ADDRESS; 
+  }
+  /* Rebuild 16 bit raw value from fsl 32 bits value */
+  phy_addr = ((info & 0x0f) << 12) | (info & 0x0f00) |
+             ((info & 0x0f0000) >> 12) | ((info & 0x0f000000) >> 24);
+
+  return phy_addr;
+}
+
+
+cec_logical_addresses CIMXCECAdapterCommunication::GetLogicalAddresses(void)
+{
+  cec_logical_addresses addresses;
+  addresses.Clear();
+
+  CLockObject lock(m_mutex);
+  if ((m_logicalAddress & (CECDEVICE_UNKNOWN | CECDEVICE_UNREGISTERED)) == 0)
+    addresses.Set(m_logicalAddress);
+
+  return addresses;
+}
+
+void CIMXCECAdapterCommunication::HandleLogicalAddressLost(cec_logical_address UNUSED(oldAddress))
+{
+  UnregisterLogicalAddress();
+}
+
+bool CIMXCECAdapterCommunication::UnregisterLogicalAddress(void)
+{
+  CLockObject lock(m_mutex);
+  if (!m_bLogicalAddressRegistered)
+    return true;
+
+  if (m_dev->Ioctl(HDMICEC_IOC_SETLOGICALADDRESS, (void *)CECDEVICE_BROADCAST) != 0)
+  {
+    LIB_CEC->AddLog(CEC_LOG_ERROR, "%s: HDMICEC_IOC_SETLOGICALADDRESS failed !", __func__);
+    return false;
+  }
+
+  m_logicalAddress = CECDEVICE_UNKNOWN;
+  m_bLogicalAddressRegistered = false;
+  return true;
+}
+
+bool CIMXCECAdapterCommunication::RegisterLogicalAddress(const cec_logical_address address)
+{
+  CLockObject lock(m_mutex);
+
+  if (m_logicalAddress == address && m_bLogicalAddressRegistered)
+  {
+    return true;
+  }
+
+  if (m_dev->Ioctl(HDMICEC_IOC_SETLOGICALADDRESS, (void *)address) != 0)
+  {
+    LIB_CEC->AddLog(CEC_LOG_ERROR, "%s: HDMICEC_IOC_SETLOGICALADDRESS failed !", __func__);
+    return false;
+  }
+
+  m_logicalAddress = address;
+  m_bLogicalAddressRegistered = true;
+  return true;
+}
+
+bool CIMXCECAdapterCommunication::SetLogicalAddresses(const cec_logical_addresses &addresses)
+{
+  int log_addr = addresses.primary;
+
+  return RegisterLogicalAddress((cec_logical_address)log_addr);
+}
+
+void *CIMXCECAdapterCommunication::Process(void)
+{
+  bool bHandled;
+  hdmi_cec_event event;
+  int ret;
+
+  uint32_t opcode, status;
+  cec_logical_address initiator, destination;
+
+  while (!IsStopped())
+  {
+    ret = m_dev->Read((char *)&event, sizeof(event), 5000);
+    if (ret > 0)
+    {
+
+      initiator = cec_logical_address(event.msg[0] >> 4);
+      destination = cec_logical_address(event.msg[0] & 0x0f);
+
+      //LIB_CEC->AddLog(CEC_LOG_DEBUG, "%s: Read data : type : %d initiator %d dest %d", __func__, event.event_type, initiator, destination);
+      if (event.event_type == MESSAGE_TYPE_RECEIVE_SUCCESS)
+      /* Message received */
+      {
+        cec_command cmd;
+
+        cec_command::Format(
+          cmd, initiator, destination,
+          ( event.msg_len > 1 ) ? cec_opcode(event.msg[1]) : CEC_OPCODE_NONE);
+
+        for( uint8_t i = 2; i < event.msg_len; i++ )
+          cmd.parameters.PushBack(event.msg[i]);
+
+        if (!IsStopped())
+          m_callback->OnCommandReceived(cmd);
+      }
+
+      if (event.event_type == MESSAGE_TYPE_CONNECTED)
+      /* HDMI has just been reconnected - Notify  phy address*/
+      {
+        uint16_t iNewAddress = GetPhysicalAddress();
+        m_callback->HandlePhysicalAddressChanged(iNewAddress);
+      }
+      /* We are not interested in other events */
+    } /*else {
+      LIB_CEC->AddLog(CEC_LOG_DEBUG, "%s: Read returned %d", __func__, ret);
+    }*/
+
+  }
+
+  return 0;
+}
+
+#endif	// HAVE_IMX_API
diff --git a/src/libcec/adapter/IMX/IMXCECAdapterCommunication.h b/src/libcec/adapter/IMX/IMXCECAdapterCommunication.h
new file mode 100644
index 0000000..9e899a3
--- /dev/null
+++ b/src/libcec/adapter/IMX/IMXCECAdapterCommunication.h
@@ -0,0 +1,119 @@
+#pragma once
+/*
+ * This file is part of the libCEC(R) library.
+ *
+ * libCEC(R) is Copyright (C) 2011-2013 Pulse-Eight Limited.  All rights reserved.
+ * libCEC(R) is an original work, containing original code.
+ *
+ * libCEC(R) is a trademark of Pulse-Eight Limited.
+ *
+ * IMX adpater port is Copyright (C) 2013 by Stephan Rafin
+ * 
+ * You can redistribute this file and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ *
+ */
+
+#if defined(HAVE_IMX_API)
+
+#include "platform/threads/mutex.h"
+#include "platform/threads/threads.h"
+#include "platform/sockets/socket.h"
+#include "adapter/AdapterCommunication.h"
+#include <map>
+
+#define IMX_ADAPTER_VID 0x0471 /*FIXME TBD*/
+#define IMX_ADAPTER_PID 0x1001
+
+
+
+namespace PLATFORM
+{
+  class CCDevSocket;
+};
+
+
+namespace CEC
+{
+  class CAdapterMessageQueueEntry;
+
+  class CIMXCECAdapterCommunication : public IAdapterCommunication, public PLATFORM::CThread
+  {
+  public:
+    /*!
+     * @brief Create a new USB-CEC communication handler.
+     * @param callback The callback to use for incoming CEC commands.
+     */
+    CIMXCECAdapterCommunication(IAdapterCommunicationCallback *callback);
+    virtual ~CIMXCECAdapterCommunication(void);
+
+    /** @name IAdapterCommunication implementation */
+    ///{
+    bool Open(uint32_t iTimeoutMs = CEC_DEFAULT_CONNECT_TIMEOUT, bool bSkipChecks = false, bool bStartListening = true);
+    void Close(void);
+    bool IsOpen(void);
+    std::string GetError(void) const;
+    cec_adapter_message_state Write(const cec_command &data, bool &bRetry, uint8_t iLineTimeout, bool bIsReply);
+
+    bool SetLineTimeout(uint8_t UNUSED(iTimeout)) { return true; }
+    bool StartBootloader(void) { return false; }
+    bool SetLogicalAddresses(const cec_logical_addresses &addresses);
+    cec_logical_addresses GetLogicalAddresses(void);
+    bool PingAdapter(void) { return IsInitialised(); }
+    uint16_t GetFirmwareVersion(void);
+    uint32_t GetFirmwareBuildDate(void) { return 0; }
+    bool IsRunningLatestFirmware(void) { return true; }
+    bool PersistConfiguration(const libcec_configuration & UNUSED(configuration)) { return false; }
+    bool GetConfiguration(libcec_configuration & UNUSED(configuration)) { return false; }
+    std::string GetPortName(void) { return std::string("IMX"); }
+    uint16_t GetPhysicalAddress(void);
+    bool SetControlledMode(bool UNUSED(controlled)) { return true; }
+    cec_vendor_id GetVendorId(void);
+    bool SupportsSourceLogicalAddress(const cec_logical_address address) { return address > CECDEVICE_TV && address <= CECDEVICE_BROADCAST; }
+    cec_adapter_type GetAdapterType(void) { return ADAPTERTYPE_IMX; }
+    uint16_t GetAdapterVendorId(void) const { return IMX_ADAPTER_VID; }
+    uint16_t GetAdapterProductId(void) const { return IMX_ADAPTER_PID; }
+    void HandleLogicalAddressLost(cec_logical_address UNUSED(oldAddress));
+    void SetActiveSource(bool UNUSED(bSetTo), bool UNUSED(bClientUnregistered)) {}
+    bool RegisterLogicalAddress(const cec_logical_address address);
+    ///}
+
+    /** @name PLATFORM::CThread implementation */
+    ///{
+    void *Process(void);
+    ///}
+
+  private:
+    bool IsInitialised(void) const { return m_bInitialised; };
+    bool UnregisterLogicalAddress(void);
+
+    std::string                 m_strError; /**< current error message */
+
+    //cec_logical_addresses       m_logicalAddresses;
+    cec_logical_address         m_logicalAddress;
+
+    PLATFORM::CMutex            m_mutex;
+    PLATFORM::CCDevSocket       *m_dev;	/**< the device connection */
+    bool                        m_bLogicalAddressRegistered;
+    bool                        m_bInitialised;
+
+    PLATFORM::CMutex            m_messageMutex;
+    uint32_t                    m_iNextMessage;
+    std::map<uint32_t, CAdapterMessageQueueEntry *> m_messages;
+  };
+  
+};
+
+#endif
diff --git a/src/libcec/adapter/IMX/IMXCECAdapterDetection.cpp b/src/libcec/adapter/IMX/IMXCECAdapterDetection.cpp
new file mode 100644
index 0000000..6c93c45
--- /dev/null
+++ b/src/libcec/adapter/IMX/IMXCECAdapterDetection.cpp
@@ -0,0 +1,42 @@
+/*
+ * This file is part of the libCEC(R) library.
+ *
+ * libCEC(R) is Copyright (C) 2011-2013 Pulse-Eight Limited.  All rights reserved.
+ * libCEC(R) is an original work, containing original code.
+ *
+ * libCEC(R) is a trademark of Pulse-Eight Limited.
+ * 
+ * IMX adpater port is Copyright (C) 2013 by Stephan Rafin
+ * 
+ * You can redistribute this file and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ *
+ */
+
+#include "env.h"
+#include <stdio.h>
+
+#if defined(HAVE_IMX_API)
+#include "IMXCECAdapterDetection.h"
+
+
+using namespace CEC;
+
+bool CIMXCECAdapterDetection::FindAdapter(void)
+{
+  return access(CEC_IMX_PATH, 0) == 0;
+}
+
+#endif
diff --git a/src/libcec/adapter/IMX/IMXCECAdapterDetection.h b/src/libcec/adapter/IMX/IMXCECAdapterDetection.h
new file mode 100644
index 0000000..d54891d
--- /dev/null
+++ b/src/libcec/adapter/IMX/IMXCECAdapterDetection.h
@@ -0,0 +1,36 @@
+#pragma once
+/*
+ * This file is part of the libCEC(R) library.
+ *
+ * libCEC(R) is Copyright (C) 2011-2013 Pulse-Eight Limited.  All rights reserved.
+ * libCEC(R) is an original work, containing original code.
+ *
+ * libCEC(R) is a trademark of Pulse-Eight Limited.
+ * 
+ * IMX adpater port is Copyright (C) 2013 by Stephan Rafin
+ * 
+ * You can redistribute this file and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ *
+ */
+
+namespace CEC
+{
+  class CIMXCECAdapterDetection
+  {
+  public:
+    static bool FindAdapter(void);
+  };
+}
diff --git a/src/libcec/cmake/CheckPlatformSupport.cmake b/src/libcec/cmake/CheckPlatformSupport.cmake
index 77b24f7..22ccfbf 100644
--- a/src/libcec/cmake/CheckPlatformSupport.cmake
+++ b/src/libcec/cmake/CheckPlatformSupport.cmake
@@ -7,6 +7,7 @@
 #       HAVE_RANDR                1 if xrandr is supported
 #       HAVE_LIBUDEV              1 if udev is supported
 #       HAVE_RPI_API              1 if Raspberry Pi is supported
+#       HAVE_IMX_API              1 if i.MX is supported
 #       HAVE_TDA995X_API          1 if TDA995X is supported
 #       HAVE_EXYNOS_API           1 if Exynos is supported
 #       HAVE_P8_USB               1 if Pulse-Eight devices are supported
@@ -110,6 +111,15 @@ else()
     list(APPEND CEC_SOURCES ${CEC_SOURCES_ADAPTER_RPI})
   endif()
 
+  # i.MX
+  if (HAVE_IMX_API)
+    set(LIB_INFO "${LIB_INFO}, 'IMX'")
+    set(CEC_SOURCES_ADAPTER_IMX adapter/IMX/IMXCECAdapterDetection.cpp
+                                adapter/IMX/IMXCECAdapterCommunication.cpp)
+    source_group("Source Files\\adapter\\IMX" FILES ${CEC_SOURCES_ADAPTER_IMX})
+    list(APPEND CEC_SOURCES ${CEC_SOURCES_ADAPTER_IMX})
+  endif()
+
   # TDA995x
   check_include_files("tda998x_ioctl.h;comps/tmdlHdmiCEC/inc/tmdlHdmiCEC_Types.h" HAVE_TDA995X_API)
   if (HAVE_TDA995X_API)
diff --git a/src/libcec/cmake/CheckPlatformSupport.cmake.orig b/src/libcec/cmake/CheckPlatformSupport.cmake.orig
new file mode 100644
index 0000000..77b24f7
--- /dev/null
+++ b/src/libcec/cmake/CheckPlatformSupport.cmake.orig
@@ -0,0 +1,188 @@
+# - Check for platform support and set variables and definitions
+#
+# This module sets the following variables
+#       PLATFORM_LIBREQUIRES      dependencies
+#       LIB_INFO                  supported features and compilation information
+#       LIB_DESTINATION           destination for the .so/.dll files
+#       HAVE_RANDR                1 if xrandr is supported
+#       HAVE_LIBUDEV              1 if udev is supported
+#       HAVE_RPI_API              1 if Raspberry Pi is supported
+#       HAVE_TDA995X_API          1 if TDA995X is supported
+#       HAVE_EXYNOS_API           1 if Exynos is supported
+#       HAVE_P8_USB               1 if Pulse-Eight devices are supported
+#       HAVE_P8_USB_DETECT        1 if Pulse-Eight devices can be auto-detected
+#       HAVE_DRM_EDID_PARSER      1 if DRM EDID parsing is supported
+#
+
+set(RPI_LIB_DIR     "" CACHE STRING "Path to Rapsberry Pi libraries")
+set(RPI_INCLUDE_DIR "" CACHE STRING "Path to Rapsberry Pi headers")
+
+set(PLATFORM_LIBREQUIRES "")
+
+include(CheckFunctionExists)
+include(FindPkgConfig)
+
+# defaults
+set(HAVE_RANDR 0)
+set(HAVE_LIBUDEV 0)
+set(HAVE_RPI_API 0)
+set(HAVE_TDA995X_API 0)
+set(HAVE_EXYNOS_API 0)
+set(HAVE_P8_USB_DETECT 0)
+set(HAVE_DRM_EDID_PARSER 0)
+# Pulse-Eight devices are always supported
+set(HAVE_P8_USB 1)
+
+# Raspberry Pi libs and headers are in a non-standard path on some distributions
+set(RPI_INCLUDE_DIR "" CACHE FILEPATH "root path to Raspberry Pi includes")
+set(RPI_LIB_DIR     "" CACHE FILEPATH "root path to Raspberry Pi libs")
+
+if(WIN32)
+  # Windows
+  add_definitions(-DTARGET_WINDOWS -DNOMINMAX -D_CRT_SECURE_NO_WARNINGS -D_WINSOCKAPI_)
+  set(LIB_DESTINATION ".")
+  if (${WIN64})
+    set(LIB_INFO "${LIB_INFO} (x64)")
+  else()
+    add_definitions(-D_USE_32BIT_TIME_T)
+  endif()
+  set(HAVE_P8_USB_DETECT 1)
+  set(LIB_INFO "${LIB_INFO}, features: P8_USB, P8_detect")
+
+  list(APPEND CEC_SOURCES_PLATFORM platform/windows/os-edid.cpp
+                                   platform/windows/serialport.cpp)
+  list(APPEND CEC_SOURCES LibCECDll.cpp
+                          libcec.rc)
+else()
+  # not Windows
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wno-missing-field-initializers")
+  list(APPEND CEC_SOURCES_PLATFORM platform/posix/os-edid.cpp
+                                   platform/posix/serialport.cpp)
+  set(HAVE_P8_USB_DETECT 0)
+  set(LIB_DESTINATION "${CMAKE_INSTALL_LIBDIR}")
+  set(LIB_INFO "${LIB_INFO}, features: P8_USB")
+
+  # always try DRM on Linux if other methods fail
+  if(NOT CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
+    set(HAVE_DRM_EDID_PARSER 1)
+    set(LIB_INFO "${LIB_INFO}, DRM")
+  endif()
+
+  # flock
+  check_include_files(sys/file.h HAVE_SYS_FILE_HEADER)
+  check_function_exists(flock HAVE_FLOCK)
+
+  # udev
+  pkg_check_modules(UDEV udev)
+  if (UDEV_FOUND)
+    set(HAVE_LIBUDEV 1)
+    set(LIB_INFO "${LIB_INFO}, P8_detect")
+    set(PLATFORM_LIBREQUIRES "${PLATFORM_LIBREQUIRES} ${UDEV_LIBRARIES}")
+    list(APPEND CMAKE_REQUIRED_LIBRARIES "${UDEV_LIBRARIES}")
+    set(HAVE_P8_USB_DETECT 1)
+  endif()
+
+  # xrandr
+  check_include_files("X11/Xlib.h;X11/Xatom.h;X11/extensions/Xrandr.h" HAVE_RANDR_HEADERS)
+  check_library_exists(Xrandr XRRGetScreenResources "" HAVE_RANDR_LIB)
+  if (HAVE_RANDR_HEADERS AND HAVE_RANDR_LIB)
+    set(LIB_INFO "${LIB_INFO}, randr")
+    list(APPEND CEC_SOURCES_PLATFORM platform/X11/randr-edid.cpp)
+    set(HAVE_RANDR 1)
+  else()
+    set(HAVE_RANDR 0)
+  endif()
+
+  # raspberry pi
+  find_library(RPI_BCM_HOST bcm_host "${RPI_LIB_DIR}")
+  check_library_exists(bcm_host bcm_host_init "${RPI_LIB_DIR}" HAVE_RPI_LIB)
+  if (HAVE_RPI_LIB)
+    set(HAVE_RPI_API 1)
+    find_library(RPI_VCOS vcos "${RPI_LIB_DIR}")
+    find_library(RPI_VCHIQ_ARM vchiq_arm "${RPI_LIB_DIR}")
+    include_directories(${RPI_INCLUDE_DIR} ${RPI_INCLUDE_DIR}/interface/vcos/pthreads ${RPI_INCLUDE_DIR}/interface/vmcs_host/linux)
+
+    set(LIB_INFO "${LIB_INFO}, RPi")
+    set(CEC_SOURCES_ADAPTER_RPI adapter/RPi/RPiCECAdapterDetection.cpp
+                                adapter/RPi/RPiCECAdapterCommunication.cpp
+                                adapter/RPi/RPiCECAdapterMessageQueue.cpp)
+    source_group("Source Files\\adapter\\RPi" FILES ${CEC_SOURCES_ADAPTER_RPI})
+    list(APPEND CEC_SOURCES ${CEC_SOURCES_ADAPTER_RPI})
+  endif()
+
+  # TDA995x
+  check_include_files("tda998x_ioctl.h;comps/tmdlHdmiCEC/inc/tmdlHdmiCEC_Types.h" HAVE_TDA995X_API)
+  if (HAVE_TDA995X_API)
+    set(HAVE_TDA995X_API 1)
+    set(LIB_INFO "${LIB_INFO}, TDA995x")
+    set(CEC_SOURCES_ADAPTER_TDA995x adapter/TDA995x/TDA995xCECAdapterDetection.cpp
+                                    adapter/TDA995x/TDA995xCECAdapterCommunication.cpp)
+    source_group("Source Files\\adapter\\TDA995x" FILES ${CEC_SOURCES_ADAPTER_TDA995x})
+    list(APPEND CEC_SOURCES ${CEC_SOURCES_ADAPTER_TDA995x})
+  endif()
+
+  # Exynos
+  if (${HAVE_EXYNOS_API})
+    set(LIB_INFO "${LIB_INFO}, Exynos")
+    set(HAVE_EXYNOS_API 1)
+    set(CEC_SOURCES_ADAPTER_EXYNOS adapter/Exynos/ExynosCECAdapterDetection.cpp
+                                   adapter/Exynos/ExynosCECAdapterCommunication.cpp)
+    source_group("Source Files\\adapter\\Exynos" FILES ${CEC_SOURCES_ADAPTER_EXYNOS})
+    list(APPEND CEC_SOURCES ${CEC_SOURCES_ADAPTER_EXYNOS})
+  else()
+    set(HAVE_EXYNOS_API 0)
+  endif()
+endif()
+
+# rt
+check_library_exists(rt clock_gettime "" HAVE_RT)
+
+# check for dlopen
+check_library_exists(dl dlopen "" HAVE_DLOPEN)
+
+SET(SKIP_PYTHON_WRAPPER 0 CACHE STRING "Define to 1 to not generate the Python wrapper")
+
+if (${SKIP_PYTHON_WRAPPER})
+  message(STATUS "Not generating Python wrapper")
+else()
+  # Python
+  include(FindPythonLibs)
+  find_package(PythonLibs)
+
+  # Swig
+  find_package(SWIG)
+  if (PYTHONLIBS_FOUND AND SWIG_FOUND)
+    set(CMAKE_SWIG_FLAGS "")
+    set(HAVE_PYTHON 1)
+    if ("${PYTHONLIBS_VERSION_STRING}" STREQUAL "")
+      message(STATUS "Python version not found, defaulting to 2.7")
+      set(PYTHONLIBS_VERSION_STRING "2.7.x")
+      set(PYTHON_VERSION "2.7")
+    else()
+      string(REGEX REPLACE "\\.[0-9]+\\+?$" "" PYTHON_VERSION ${PYTHONLIBS_VERSION_STRING})
+    endif()
+
+    include(${SWIG_USE_FILE})
+    include_directories(${PYTHON_INCLUDE_PATH})
+    include_directories(${CMAKE_CURRENT_SOURCE_DIR})
+
+    SET_SOURCE_FILES_PROPERTIES(libcec.i PROPERTIES CPLUSPLUS ON)
+    swig_add_module(cec python libcec.i)
+    swig_link_libraries(cec ${PYTHON_LIBRARIES})
+    swig_link_libraries(cec cec)
+
+    if(WIN32)
+      install(TARGETS     ${SWIG_MODULE_cec_REAL_NAME}
+              DESTINATION python/cec)
+      install(FILES       ${CMAKE_BINARY_DIR}/src/libcec/cec.py
+              DESTINATION python/cec
+              RENAME      __init__.py)
+    else()
+      install(TARGETS     ${SWIG_MODULE_cec_REAL_NAME}
+              DESTINATION lib/python${PYTHON_VERSION}/dist-packages/cec)
+      install(FILES       ${CMAKE_BINARY_DIR}/src/libcec/cec.py
+              DESTINATION lib/python${PYTHON_VERSION}/dist-packages/cec
+              RENAME      __init__.py)
+    endif()
+  endif()
+endif()
diff --git a/src/libcec/cmake/DisplayPlatformSupport.cmake b/src/libcec/cmake/DisplayPlatformSupport.cmake
index 9dcaacf..4e24def 100644
--- a/src/libcec/cmake/DisplayPlatformSupport.cmake
+++ b/src/libcec/cmake/DisplayPlatformSupport.cmake
@@ -26,6 +26,12 @@ else()
   message(STATUS "Raspberry Pi support:                   no")
 endif()
 
+if (HAVE_IMX_API)
+  message(STATUS "i.MX support:                           yes")
+else()
+  message(STATUS "i.MX support:                           no")
+endif()
+
 if (HAVE_TDA995X_API)
   message(STATUS "TDA995x support:                        yes")
 else()
diff --git a/src/libcec/cmake/DisplayPlatformSupport.cmake.orig b/src/libcec/cmake/DisplayPlatformSupport.cmake.orig
new file mode 100644
index 0000000..9dcaacf
--- /dev/null
+++ b/src/libcec/cmake/DisplayPlatformSupport.cmake.orig
@@ -0,0 +1,54 @@
+# - Display platform support found by CheckPlatformSupport.cmake
+
+message(STATUS "Configured features:")
+
+if (HAVE_P8_USB)
+  message(STATUS "Pulse-Eight CEC Adapter:                yes")
+else()
+  message(STATUS "Pulse-Eight CEC Adapter:                no")
+endif()
+
+if (HAVE_P8_USB_DETECT)
+  message(STATUS "Pulse-Eight CEC Adapter detection:      yes")
+else()
+  message(STATUS "Pulse-Eight CEC Adapter detection:      no")
+endif()
+
+if (HAVE_RANDR)
+  message(STATUS "xrandr support:                         yes")
+else()
+  message(STATUS "xrandr support:                         no")
+endif()
+
+if (HAVE_RPI_API)
+  message(STATUS "Raspberry Pi support:                   yes")
+else()
+  message(STATUS "Raspberry Pi support:                   no")
+endif()
+
+if (HAVE_TDA995X_API)
+  message(STATUS "TDA995x support:                        yes")
+else()
+  message(STATUS "TDA995x support:                        no")
+endif()
+
+if (HAVE_EXYNOS_API)
+  message(STATUS "Exynos support:                         yes")
+else()
+  message(STATUS "Exynos support:                         no")
+endif()
+
+if (HAVE_DRM_EDID_PARSER)
+  message(STATUS "DRM support:                            yes")
+else()
+  message(STATUS "DRM support:                            no")
+endif()
+
+if (HAVE_PYTHON)
+  message(STATUS "Python support:                         version ${PYTHONLIBS_VERSION_STRING} (${PYTHON_VERSION})")
+else()
+  message(STATUS "Python support:                         no")
+endif()
+
+message(STATUS "lib info: ${LIB_INFO}")
+
diff --git a/src/libcec/env.h.in b/src/libcec/env.h.in
index 0496aa0..384f1c7 100644
--- a/src/libcec/env.h.in
+++ b/src/libcec/env.h.in
@@ -66,6 +66,9 @@
 /* Define to 1 for Raspberry Pi support */
 #cmakedefine HAVE_RPI_API @HAVE_RPI_API@
 
+/* Define to 1 for IMX support */
+#cmakedefine HAVE_IMX_API @HAVE_IMX_API@
+
 /* Define to 1 for TDA995x support */
 #cmakedefine HAVE_TDA995X_API @HAVE_TDA995X_API@
 
diff --git a/src/libcec/env.h.in.orig b/src/libcec/env.h.in.orig
new file mode 100644
index 0000000..0496aa0
--- /dev/null
+++ b/src/libcec/env.h.in.orig
@@ -0,0 +1,85 @@
+#pragma once
+/*
+ * WARNING: Auto-generated file from env.h.in
+ *
+ * This file is part of the libCEC(R) library.
+ *
+ * libCEC(R) is Copyright (C) 2011-2015 Pulse-Eight Limited.  All rights reserved.
+ * libCEC(R) is an original work, containing original code.
+ *
+ * libCEC(R) is a trademark of Pulse-Eight Limited.
+ *
+ * This program is dual-licensed; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ *
+ *
+ * Alternatively, you can license this library under a commercial license,
+ * please contact Pulse-Eight Licensing for more information.
+ *
+ * For more information contact:
+ * Pulse-Eight Licensing       <license@pulse-eight.com>
+ *     http://www.pulse-eight.com/
+ *     http://www.pulse-eight.net/
+ */
+
+#include "cectypes.h"
+#include <p8-platform/os.h>
+
+#ifdef UNUSED
+#elif defined(__GNUC__)
+#define UNUSED(x) UNUSED_ ## x __attribute__((unused))
+#elif defined(__LCLINT__)
+#define UNUSED(x) /*@unused@*/ x
+#else
+#define UNUSED(x) x
+#endif
+
+/* Define to 1 for xrandr support */
+#cmakedefine HAVE_RANDR @HAVE_RANDR@
+
+/* Define to 1 if <sys/file.h> should be included for flock() */
+#cmakedefine HAVE_SYS_FILE_HEADER @HAVE_SYS_FILE_HEADER@
+
+/* Define to 1 for flock() support */
+#cmakedefine HAVE_FLOCK @HAVE_FLOCK@
+
+/* Define to 1 for udev support */
+#cmakedefine HAVE_LIBUDEV @HAVE_LIBUDEV@
+
+/* Define to 1 for Pulse-Eight CEC Adapter support */
+#cmakedefine HAVE_P8_USB @HAVE_P8_USB@
+
+/* Define to 1 for Pulse-Eight CEC Adapter detection support */
+#cmakedefine HAVE_P8_USB_DETECT @HAVE_P8_USB_DETECT@
+
+/* Define to 1 for Raspberry Pi support */
+#cmakedefine HAVE_RPI_API @HAVE_RPI_API@
+
+/* Define to 1 for TDA995x support */
+#cmakedefine HAVE_TDA995X_API @HAVE_TDA995X_API@
+
+/* Define to 1 for Exynos support */
+#cmakedefine HAVE_EXYNOS_API @HAVE_EXYNOS_API@
+
+/* Define to 1 for nVidia EDID parsing support (on selected models) */
+#cmakedefine HAVE_NVIDIA_EDID_PARSER @HAVE_NVIDIA_EDID_PARSER@
+
+/* Define to 1 for DRM EDID parsing support */
+#cmakedefine HAVE_DRM_EDID_PARSER @HAVE_DRM_EDID_PARSER@
+
+/* Define to 1 for Python support */
+#cmakedefine HAVE_PYTHON @HAVE_PYTHON@
+
+/* information about how libCEC was compiled */
+#define LIB_INFO ("@LIB_INFO@")
-- 
2.5.0

